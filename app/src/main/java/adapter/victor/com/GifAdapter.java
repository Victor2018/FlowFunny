package adapter.victor.com;import android.content.Context;import android.graphics.Bitmap;import android.graphics.Canvas;import android.graphics.PixelFormat;import android.graphics.drawable.Drawable;import android.view.LayoutInflater;import android.view.View;import android.view.ViewGroup;import android.widget.AbsListView;import android.widget.BaseAdapter;import android.widget.ImageView;import android.widget.ListView;import android.widget.TextView;import com.bumptech.glide.Glide;import com.bumptech.glide.load.engine.DiskCacheStrategy;import com.bumptech.glide.request.target.Target;import com.squareup.picasso.Picasso;import java.io.ByteArrayInputStream;import java.io.ByteArrayOutputStream;import java.io.InputStream;import java.util.List;import data.victor.com.GifContentData;import util.victor.com.AsyncImageLoader;import util.victor.com.ImageDownLoader;import view.victor.com.CircleImageView;import view.victor.com.GifView;import view.victor.com.ZdpImageView;import flowfunny.victor.com.R;/** * Created by victor on 2016/1/6. */public class GifAdapter extends BaseAdapter implements AbsListView.OnScrollListener{    private String TAG = "GifAdapter";    private Context mContext;    private List<GifContentData> gifConnentDatas;    private ListView mListView;    /**     * Image 下载器     */    private ImageDownLoader mImageDownLoader;    private boolean isFirstEnter = true;//记录是否刚打开程序，用于解决进入程序不滚动屏幕，不会下载图片的问题。    private int mFirstVisibleItem;//一屏中第一个item的位置    private int mVisibleItemCount;//一屏中所有item的个数    public void setGifConnentDatas(List<GifContentData> gifConnentDatas) {        this.gifConnentDatas = gifConnentDatas;    }    public List<GifContentData> getGifConnentDatas() {        return gifConnentDatas;    }    public GifAdapter(Context context, ListView listView) {        mContext = context;        mListView = listView;        mImageDownLoader = new ImageDownLoader(context);    }    @Override    public int getCount() {        return gifConnentDatas.size();    }    @Override    public Object getItem(int position) {        return gifConnentDatas.get(position);    }    @Override    public long getItemId(int position) {        return position;    }    @Override    public View getView(int position, View convertView, ViewGroup parent) {        final viewHolder holder;        if (convertView == null) {            holder = new viewHolder();            LayoutInflater inflater = LayoutInflater.from(mContext);            convertView = inflater.inflate(R.layout.lv_gif_frag_item,null);            holder.mIvIcon = (ImageView) convertView.findViewById(R.id.iv_gif_frag_icon);            holder.mTvName = (TextView) convertView.findViewById(R.id.tv_gif_frag_name);            holder.mTvTitle = (TextView) convertView.findViewById(R.id.tv_gif_frag_title);            holder.mZdpImg = (ZdpImageView) convertView.findViewById(R.id.ziv_gif_frag_gif);            holder.mTvText = (TextView) convertView.findViewById(R.id.tv_gif_frag_text);            convertView.setTag(holder);        } else {            holder = (viewHolder) convertView.getTag();        }        GifContentData data = gifConnentDatas.get(position);        holder.mTvName.setText(data.getName());        holder.mTvTitle.setText(data.getCreateTime());        holder.mTvText.setText(data.getText());        String imgUrl = data.getImage0();        Glide.with(mContext).load(imgUrl).asGif().diskCacheStrategy(DiskCacheStrategy.SOURCE).override(Target.SIZE_ORIGINAL, Target.SIZE_ORIGINAL).placeholder(R.mipmap.img_empty).into(holder.mZdpImg);        String iconUrl = data.getProfileImage();        Bitmap bitmap = mImageDownLoader.showCacheBitmap(iconUrl.replaceAll("[^\\w]", ""));        if(bitmap != null){            holder.mIvIcon.setImageBitmap(bitmap);        }else{            mImageDownLoader.downloadImage(iconUrl, new ImageDownLoader.onImageLoaderListener() {                @Override                public void onImageLoader(Bitmap bitmap, String url) {                    if (bitmap != null) {                        holder.mIvIcon.setImageBitmap(bitmap);                    }                }            });        }        return convertView;    }    @Override    public void onScrollStateChanged(AbsListView view, int scrollState) {        //仅当GridView静止时才去下载图片，GridView滑动时取消所有正在下载的任务        if(scrollState == AbsListView.OnScrollListener.SCROLL_STATE_IDLE){            showImage(mFirstVisibleItem, mVisibleItemCount);        }else{            cancelTask();        }    }    /**     * ListView滚动的时候调用的方法，刚开始显示ListView也会调用此方法     */    @Override    public void onScroll(AbsListView view, int firstVisibleItem, int visibleItemCount, int totalItemCount) {        mFirstVisibleItem = firstVisibleItem;        mVisibleItemCount = visibleItemCount;        // 因此在这里为首次进入程序开启下载任务。        if(isFirstEnter && visibleItemCount > 0){            showImage(mFirstVisibleItem, mVisibleItemCount);            isFirstEnter = false;        }    }    /**     * 显示当前屏幕的图片，先会去查找LruCache，LruCache没有就去sd卡或者手机目录查找，在没有就开启线程去下载     * @param firstVisibleItem     * @param visibleItemCount     */    private void showImage(int firstVisibleItem, int visibleItemCount){        Bitmap bitmap = null;        for(int i=firstVisibleItem; i<firstVisibleItem + visibleItemCount; i++){            String mImageUrl = gifConnentDatas.get(i).getImage0();            final CircleImageView mImageView = (CircleImageView) mListView.findViewWithTag(mImageUrl);            bitmap = mImageDownLoader.downloadImage(mImageUrl, new ImageDownLoader.onImageLoaderListener() {                @Override                public void onImageLoader(Bitmap bitmap, String url) {                    if(mImageView != null && bitmap != null){                        mImageView.setImageBitmap(bitmap);                    }                }            });            if(bitmap != null){                mImageView.setImageBitmap(bitmap);            }else{                mImageView.setImageDrawable(mContext.getResources().getDrawable(R.mipmap.img_empty));            }        }    }    /**     * 取消下载任务     */    public void cancelTask(){        mImageDownLoader.cancelTask();    }    // Drawable转换成Bitmap    public Bitmap drawable2Bitmap(Drawable drawable) {        Bitmap bitmap = Bitmap                .createBitmap(                        drawable.getIntrinsicWidth(),                        drawable.getIntrinsicHeight(),                        drawable.getOpacity() != PixelFormat.OPAQUE ? Bitmap.Config.ARGB_8888                                : Bitmap.Config.RGB_565);        Canvas canvas = new Canvas(bitmap);        drawable.setBounds(0, 0, drawable.getIntrinsicWidth(),                drawable.getIntrinsicHeight());        drawable.draw(canvas);        return bitmap;    }    private class viewHolder {        ImageView mIvIcon;        ZdpImageView mZdpImg;        TextView mTvName;        TextView mTvTitle;        TextView mTvText;    }}