package adapter.victor.com;import android.content.Context;import android.content.Intent;import android.graphics.Bitmap;import android.os.Bundle;import android.support.v7.widget.CardView;import android.support.v7.widget.RecyclerView;import android.util.Log;import android.view.LayoutInflater;import android.view.View;import android.view.ViewGroup;import android.widget.AdapterView;import android.widget.ImageView;import android.widget.TextView;import com.squareup.picasso.Picasso;import java.util.List;import data.victor.com.PictureContentData;import flowfunny.victor.com.R;import mode.victor.com.DataObservable;import util.victor.com.Constant;import util.victor.com.ImageDownLoader;/** * Created by victor on 2016/6/1. */public class PictureAdapter extends RecyclerView.Adapter<RecyclerView.ViewHolder>{    private String TAG = "PictureAdapter";    private final LayoutInflater mLayoutInflater;    private final Context mContext;    private static List<PictureContentData> pictureContentDatas;    protected int mHeaderCount = 1;//头部View个数    protected int mBottomCount = 1;//底部View个数    private int ITEM_TYPE_HEADER = 0;    private int ITEM_TYPE_CONTENT = 1;    private int ITEM_TYPE_BOTTOM = 2;    private boolean isHeaderVisible = true;    private boolean isFooterVisible = true;    /**     * Image 下载器     */    private ImageDownLoader mImageDownLoader;    public List<PictureContentData> getPictureContentDatas() {        return pictureContentDatas;    }    public void setPictureContentDatas(List<PictureContentData> pictureContentDatas) {        this.pictureContentDatas = pictureContentDatas;    }    public PictureAdapter(Context context) {        mContext = context;        mLayoutInflater = LayoutInflater.from(context);        mImageDownLoader = new ImageDownLoader(context);    }    public void setHeaderVisible (boolean visible) {        isHeaderVisible = visible;        mHeaderCount = 1;        if (!isHeaderVisible) {            mHeaderCount = 0;        }        notifyDataSetChanged();    }    public void setFooterVisible (boolean visible) {        isFooterVisible = visible;        mBottomCount = 1;        if (!isFooterVisible) {            mBottomCount = 0;        }        notifyDataSetChanged();    }    @Override    public RecyclerView.ViewHolder onCreateViewHolder(ViewGroup parent, int viewType) {        if (viewType == ITEM_TYPE_HEADER) {            return onCreateHeaderView(parent);        } else if (viewType == ITEM_TYPE_CONTENT) {            return onCreateContentView(parent);        } else if (viewType == ITEM_TYPE_BOTTOM) {            return onCreateBottomView(parent);        }        return null;    }    public RecyclerView.ViewHolder onCreateHeaderView (ViewGroup parent){        return new HeaderViewHolder(mLayoutInflater.inflate(R.layout.recyclerview_header, parent, false));    }    public RecyclerView.ViewHolder onCreateContentView (ViewGroup parent){        return new ContentViewHolder(mLayoutInflater.inflate(R.layout.recyclerview_content_img, parent, false));    }    public RecyclerView.ViewHolder onCreateBottomView (ViewGroup parent) {        return new BottomViewHolder(mLayoutInflater.inflate(R.layout.recyclerview_foot, parent, false));    }    @Override    public void onBindViewHolder(RecyclerView.ViewHolder holder, int position) {        if (holder instanceof HeaderViewHolder) {            ((HeaderViewHolder) holder).mTvTitle.setVisibility(View.GONE);        } else if (holder instanceof ContentViewHolder) {            final ImageView mIvImg = ((ContentViewHolder) holder).mIvImg;            TextView mTvTitle = ((ContentViewHolder) holder).mTvTitle;            int limit = 48;            if (position < pictureContentDatas.size()) {                PictureContentData data = pictureContentDatas.get(position);                String desc = data.desc.length() > limit ? data.desc.substring(0, limit) + "..." : data.desc;                mTvTitle.setText(desc);                String imgUrl = pictureContentDatas.get(position).url;                Bitmap bitmap = mImageDownLoader.showCacheBitmap(imgUrl.replaceAll("[^\\w]", ""));                if(bitmap != null){                    mIvImg.setImageBitmap(bitmap);                }else{                    mImageDownLoader.downloadImage(imgUrl, new ImageDownLoader.onImageLoaderListener() {                        @Override                        public void onImageLoader(Bitmap bitmap, String url) {                            if (bitmap != null) {                                mIvImg.setImageBitmap(bitmap);                            }                        }                    });//                    Picasso.with(mContext).load(imgUrl).fit().centerCrop().into(mIvImg);                }            }        } else if (holder instanceof BottomViewHolder) {//            ((BottomViewHolder) holder).mTvTitle.setVisibility(View.GONE);        }    }    @Override    public int getItemViewType(int position) {        int ITEM_TYPE = ITEM_TYPE_CONTENT;        int dataItemCount = getContentItemCount();        if (mHeaderCount != 0 && position < mHeaderCount) {//头部View            ITEM_TYPE = ITEM_TYPE_HEADER;        } else if (mBottomCount != 0 && position >= (mHeaderCount + dataItemCount)) {//底部View            ITEM_TYPE = ITEM_TYPE_BOTTOM;        }        return ITEM_TYPE;    }    public boolean isHeaderView(int position) {        return mHeaderCount != 0 && position < mHeaderCount;    }    public boolean isBottomView(int position) {        return mBottomCount != 0 && position >= (mHeaderCount + getContentItemCount());    }    public int getContentItemCount() {        return pictureContentDatas == null ? 0 : pictureContentDatas.size();    }    @Override    public int getItemCount() {        return mHeaderCount + getContentItemCount() + mBottomCount;    }    public static class ContentViewHolder extends RecyclerView.ViewHolder implements View.OnLongClickListener{        ImageView mIvImg;        TextView mTvTitle;        ContentViewHolder(View view) {            super(view);            mIvImg = (ImageView) itemView.findViewById(R.id.iv_img);            mTvTitle = (TextView) view.findViewById(R.id.tv_title);            view.setOnLongClickListener(this);        }        @Override        public boolean onLongClick(View v) {            if (getAdapterPosition() < pictureContentDatas.size()) {                String imgUrl = pictureContentDatas.get(getAdapterPosition()).url;                Bundle bundle = new Bundle();                bundle.putInt(Constant.ACTION_KEY,Constant.Action.SHARE_PICTURE);                bundle.putString(Constant.INTENT_DATA_KEY,imgUrl);                DataObservable.getInstance().setData(bundle);            }            return false;        }    }    public static class HeaderViewHolder extends RecyclerView.ViewHolder {        ImageView mIvImg;        TextView mTvTitle;        public HeaderViewHolder(View itemView) {            super(itemView);            mIvImg = (ImageView) itemView.findViewById(R.id.iv_img);            mTvTitle = (TextView) itemView.findViewById(R.id.tv_title);        }    }    public static class BottomViewHolder extends RecyclerView.ViewHolder {        ImageView mIvImg;        TextView mTvTitle;        public BottomViewHolder(View itemView) {            super(itemView);            mIvImg = (ImageView) itemView.findViewById(R.id.iv_img);            mTvTitle = (TextView) itemView.findViewById(R.id.tv_title);        }    }}