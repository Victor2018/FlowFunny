package flowfunny.victor.com;        import android.content.Context;        import android.content.Intent;        import android.content.pm.ActivityInfo;        import android.content.res.Configuration;        import android.graphics.Point;        import android.graphics.drawable.AnimationDrawable;        import android.media.AudioManager;        import android.os.Build;        import android.os.Bundle;        import android.os.Handler;        import android.os.Message;        import android.os.PersistableBundle;        import android.support.v4.app.Fragment;        import android.support.v4.app.FragmentActivity;        import android.support.v7.app.AppCompatActivity;        import android.text.TextUtils;        import android.util.Log;        import android.view.Display;        import android.view.GestureDetector;        import android.view.KeyEvent;        import android.view.MotionEvent;        import android.view.SurfaceView;        import android.view.View;        import android.view.ViewGroup;        import android.view.WindowManager;        import android.view.animation.Animation;        import android.view.animation.AnimationUtils;        import android.view.animation.LinearInterpolator;        import android.view.animation.TranslateAnimation;        import android.widget.AbsListView;        import android.widget.AdapterView;        import android.widget.FrameLayout;        import android.widget.ImageButton;        import android.widget.ImageView;        import android.widget.LinearLayout;        import android.widget.ListView;        import android.widget.ProgressBar;        import android.widget.RelativeLayout;        import android.widget.SeekBar;        import android.widget.TextView;        import android.widget.Toast;        import com.victor.update.library.ui.UpdateActivity;        import org.json.JSONArray;        import org.json.JSONException;        import org.json.JSONObject;        import java.util.ArrayList;        import java.util.List;        import java.util.Observable;        import java.util.Observer;        import java.util.logging.Logger;        import adapter.victor.com.ChannelAdapter;        import adapter.victor.com.SlidingMenuLeftAdapter;        import adapter.victor.com.ViewPagerAdapter;        import data.victor.com.Channel;        import data.victor.com.EpgData;        import data.victor.com.EpgInfo;        import data.victor.com.MeiPaiCategoryContentData;        import data.victor.com.MeiPaiCategoryData;        import data.victor.com.MeiPaiContentData;        import data.victor.com.VideoContentData;        import frag.victor.com.FunnyFrag;        import frag.victor.com.GifFrag;        import frag.victor.com.MeiPaiFrag;        import frag.victor.com.PictureFrag;        import frag.victor.com.VideoFrag;        import frag.victor.com.VoiceFrag;        import mode.victor.com.DataObservable;        import model.victor.com.ChannelTask;        import module.victor.com.Player;        import util.victor.com.Constant;        import util.victor.com.EpgUtil;        import util.victor.com.HttpRequestHelper;        import util.victor.com.ScreenOrientationUtil;        import util.victor.com.SharePreferencesUtil;        import view.victor.com.AttrViewPager;        import view.victor.com.HeartBubbleView;        import view.victor.com.KenBurnsView;        import view.victor.com.MovingTextView;        import view.victor.com.PagerSlidingTabStrip;        import view.victor.com.ResideLayout;        import view.victor.com.ScrollableLayout;        import view.victor.com.SlidingMenu;        import view.victor.com.TipView;public class MainActivity extends UpdateActivity implements Observer,View.OnClickListener,        SeekBar.OnSeekBarChangeListener,View.OnTouchListener,AbsListView.OnScrollListener {    private String TAG = "MainActivity";    private View view;    //    private SlidingMenu mLeftMenu ;    //    private ScrollableLayout mLayoutContent;    private ResideLayout mLayoutSlide;    private RelativeLayout mLayoutContent,mLayoutBottom;    private FrameLayout mLayoutHeader;    private SurfaceView mSvPlay;    private MovingTextView mMtvTitle;    private TextView mTvPassTime,mTvLongTime;    private SeekBar mSbProgress;    private ImageButton mIbBack,mIbLock,mIbPlay,mIbScale;    private ImageView mIvPlayCenter,mIvOperBg,mIvLiveLoading,mIvRunLoading,mIvRunFold;    private TipView mTvTip;    private ProgressBar mPbVolBright;    private RelativeLayout mLayoutCtrl;    private ListView mLvChannels;    private LinearLayout mLayoutChannels;    private FrameLayout mLayoutTitle,mLayoutOperVolBright,mLayoutTip;    private KenBurnsView mHeaderPicture;    private ListView mLvLeftMenu;    private AttrViewPager mAttrViewPager;    private PagerSlidingTabStrip tabs;    private FunnyFrag mFunnyFrag;    private GifFrag mGifFrag;    private VoiceFrag mVoiceFrag;    private VideoFrag mVideoFrag;    private PictureFrag mPictureFrag;    private SlidingMenuLeftAdapter mSlidingMenuLeftAdapter;    private ViewPagerAdapter mViewPagerAdapter;    private AnimationDrawable liveLoadingAnim,runLoadingAnim;    private Animation mAnimShowChannels,mAnimShowTitleBar,mAnimShowCtrlBar,mAnimHideChannels            ,mAnimHideTitleBar,mAnimHideCtrlBar,mAnimaRotate;    private String[] leftMenus;    private int[] leftMenusIcons;    //    private String[] titles = { "段子", "福利","图片", "声音","视频"};    private List<String> titles = new ArrayList<>();    private List<Fragment> frags = new ArrayList<Fragment>();    private ChannelAdapter mChannelAdapter;    private List<Channel> channels = new ArrayList<>();    private ChannelTask mChannelTask;    long exitTime = 0;    private  Player mPlayer;    private VideoContentData videoContentData;    private MeiPaiContentData meiPaiContentData;    private boolean isSeeking;//正在拖到进度    private GestureDetector mGestureDetector;    private AudioManager mAudioManager;    private int mMaxVolume;    private int mVolume = -1;    private float mBrightness = -1f;    private int mDuration = 0;//影片时长    private int cachedHeight;    private boolean isFullscreen;    private ScreenOrientationUtil sou;    private boolean isLock;//是否锁屏，锁屏则不可旋转屏幕    private int currentPosition;//当前播放直播频道位置    private int livePosition;//当前播放直播源地址位置    private boolean isLive = true;//当前播放的是否是直播    private boolean isMeiPaiVideo;//当前播放的是否是美拍视频    private boolean isFirstPlayLive = true;    private boolean isChannelSelecting;//是否正在选台    private HttpRequestHelper mHttpRequestHelper;    Handler mHandler = new Handler(){        @Override        public void handleMessage(Message msg) {            switch (msg.what) {                case Constant.Msg.UPDATE_CATEGORY:                    showCategory((List<MeiPaiCategoryContentData>) msg.obj);                    break;                case Constant.Msg.SHOW_LIVE_EPG:                    List<EpgInfo> epgs = (List<EpgInfo>) msg.obj;                    List<String> tips = new ArrayList<>();                    tips.add("当前频道：湖北卫视HD");                    if (!isFirstPlayLive) {                        tips.remove(0);                        tips.add("当前频道：" + channels.get(currentPosition).getName());                    }                    if (epgs != null) {                        if (epgs.size() == 1) {                            tips.add("正在播放：" + epgs.get(0).epg);                            mMtvTitle.setText("正在播放：" +  epgs.get(0).epg);                        } else if (epgs.size() == 2) {                            tips.add("正在播放：" + epgs.get(0).epg);                            tips.add("即将播放：" + epgs.get(1).epg);                            mMtvTitle.setText("正在播放：" +  epgs.get(0).epg + "  即将播放：" + epgs.get(1).epg);                        }                    }                    mTvTip.setTipList(tips);                    break;                case Constant.Msg.PLAY_VIDEO:                    view.setSystemUiVisibility(View.SYSTEM_UI_FLAG_VISIBLE);                    startLoadingAimi();                    isMeiPaiVideo = false;                    playVideo();                    break;                case Constant.Action.PLAY_MEIPAI_VIDEO:                    view.setSystemUiVisibility(View.SYSTEM_UI_FLAG_VISIBLE);                    startLoadingAimi();                    isMeiPaiVideo = true;                    playVideo();                    break;                case Player.PLAYER_PREPARING:                    view.setSystemUiVisibility(View.SYSTEM_UI_FLAG_VISIBLE);                    startLoadingAimi();                    if (mLayoutCtrl.getVisibility() == View.GONE) {                        showViewAnim();                    }                    break;                case Player.PLAYER_PREPARED:                    if (isFullscreen) {                        view.setSystemUiVisibility(View.SYSTEM_UI_FLAG_FULLSCREEN);                    }                    stopLoadingAnimi();                    mSvPlay.setVisibility(View.VISIBLE);                    if (mLayoutCtrl.getVisibility() == View.VISIBLE) {                        hiddenViewAnim();                    }                    mDuration = mPlayer.getMediaPlayer().getDuration();                    if (mDuration > 0) {                        String longTime = showTime(mDuration / 1000);                        mTvLongTime.setText(longTime);                    }                    break;                case Player.PLAYER_ERROR:                    view.setSystemUiVisibility(View.SYSTEM_UI_FLAG_VISIBLE);                    stopLoadingAnimi();                    if (mLayoutCtrl.getVisibility() == View.GONE) {                        showViewAnim();                    }                    break;                case Player.PLAYER_BUFFERING_START:                    view.setSystemUiVisibility(View.SYSTEM_UI_FLAG_VISIBLE);                    startLoadingAimi();                    if (mLayoutCtrl.getVisibility() == View.GONE) {                        showViewAnim();                    }                    break;                case Player.PLAYER_BUFFERING_END:                    view.setSystemUiVisibility(View.SYSTEM_UI_FLAG_VISIBLE);                    stopLoadingAnimi();                    if (mLayoutCtrl.getVisibility() == View.VISIBLE) {                        hiddenViewAnim();                    }                    break;//                case Player.PLAYER_REPLAY://                    view.setSystemUiVisibility(View.SYSTEM_UI_FLAG_VISIBLE);//                    livePosition ++;//                    startLoadingAimi();//                    if (mLayoutCtrl.getVisibility() == View.GONE) {//                        showViewAnim();//                    }//                    break;                case Player.PLAYER_PROGRESS_INFO:                    if (isLive) {                        return;                    }                    if (mPlayer != null && mPlayer.getMediaPlayer() != null) {                        int elapseMsec = mPlayer.getMediaPlayer().getCurrentPosition();                        String mTimePass= showTime(elapseMsec / 1000);                        mTvPassTime.setText(mTimePass);                        if (mDuration > 0) {                            int progress = elapseMsec * 100 / mDuration;                            mSbProgress.setProgress(progress);                        }                    }                    break;                case Player.PLAYER_COMPLETE:                    //如果不是直播播放完毕后自动播放下一个视频                    if (!isLive) {                        if (isMeiPaiVideo) {                            DataObservable.getInstance().setData(Constant.Action.PLAY_NEXT_MEIPAI_VIDEO);                        } else {                            DataObservable.getInstance().setData(Constant.Action.PLAY_NEXT_VIDEO);                        }                        if (mLayoutCtrl.getVisibility() == View.GONE) {                            showViewAnim();                        }                        return;                    }                    view.setSystemUiVisibility(View.SYSTEM_UI_FLAG_VISIBLE);                    stopLoadingAnimi();                    mSvPlay.setVisibility(View.GONE);                    mMtvTitle.setText("");                    if (mLayoutCtrl.getVisibility() == View.GONE) {                        showViewAnim();                    }                    if (isFullscreen) {                        scaleScreen();                        screenChanged();                        hiddenViewAnim();                    }                    break;                case Constant.Msg.HIDE_PLAY_CTRL_VIEW:                    if (!isSeeking && !isChannelSelecting) {                        hiddenViewAnim();                    }                    break;                case Constant.Msg.REQUEST_SUCCESS:                    channels = (List<Channel>) msg.obj;                    mChannelAdapter.setChannels(channels);                    mChannelAdapter.notifyDataSetChanged();                    break;                case Constant.Msg.REQUEST_FAILED:                    Toast.makeText(getApplicationContext(),"访问服务器失败！",Toast.LENGTH_SHORT).show();                    break;                case Constant.Msg.NETWORK_ERROR:                    Toast.makeText(getApplicationContext(),"网络错误，请检查网络是否连接！",Toast.LENGTH_SHORT).show();                    break;                case Constant.Msg.SOCKET_TIME_OUT:                    Toast.makeText(getApplicationContext(),"访问服务器超时，请重试！",Toast.LENGTH_SHORT).show();                    break;                case Constant.Msg.HIDE_ACTION_BAR:                    if (isFullscreen) {                        view.setSystemUiVisibility(View.SYSTEM_UI_FLAG_FULLSCREEN);                    }                    break;                case Constant.Msg.DRAW_HEART_BUBBLE:                    mHandler.sendEmptyMessageDelayed(Constant.Msg.DRAW_HEART_BUBBLE,200);                    if (isLock) {                        return;                    }                    drawHeartBubble();                    break;            }        }    };    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        Log.e(TAG, "onCreate()......");//        view = getLayoutInflater().from(this).inflate(R.layout.activity_main,null);        view = getLayoutInflater().from(this).inflate(R.layout.activity_reside,null);        setContentView(view);        initialize();        initData();        initLoadingAnimi();        initAnim();    }    private void initialize (){        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) {            WindowManager.LayoutParams localLayoutParams = getWindow().getAttributes();            localLayoutParams.flags = (WindowManager.LayoutParams.FLAG_TRANSLUCENT_STATUS | localLayoutParams.flags);        }        DataObservable.getInstance().addObserver(this);        mHttpRequestHelper = new HttpRequestHelper(this);        sou = ScreenOrientationUtil.getInstance();//        mLeftMenu = (SlidingMenu) findViewById(R.id.id_menu);        mLayoutSlide = (ResideLayout) findViewById(R.id.rl_slide);        mHeaderPicture = (KenBurnsView) findViewById(R.id.header_picture);        mHeaderPicture.setResourceIds(R.mipmap.pic0, R.mipmap.pic1);        mLayoutContent = (RelativeLayout) findViewById(R.id.l_sliding_menu_content);        mLayoutHeader = (FrameLayout) findViewById(R.id.fl_header);        mLayoutBottom = (RelativeLayout) findViewById(R.id.rl_bottom);        mSvPlay = (SurfaceView) findViewById(R.id.sv_play);        mMtvTitle = (MovingTextView) findViewById(R.id.mtv_title);        mIbBack = (ImageButton) findViewById(R.id.ib_back);        mIbLock = (ImageButton) findViewById(R.id.ib_lock);        mIvPlayCenter = (ImageView) findViewById(R.id.iv_play_center);        mIbPlay = (ImageButton) findViewById(R.id.ib_play);        mTvPassTime = (TextView) findViewById(R.id.tv_pass_time);        mTvLongTime = (TextView) findViewById(R.id.tv_long_time);        mSbProgress = (SeekBar) findViewById(R.id.sb_progress);        mIbScale = (ImageButton) findViewById(R.id.ib_scale);        mLayoutTitle = (FrameLayout) findViewById(R.id.l_title);        mLayoutCtrl = (RelativeLayout) findViewById(R.id.rl_ctrl);        mLvChannels = (ListView) findViewById(R.id.lv_channels);        mLayoutChannels = (LinearLayout) findViewById(R.id.l_channels);        mLayoutTip = (FrameLayout) findViewById(R.id.fl_tip);        mIvLiveLoading = (ImageView) findViewById(R.id.iv_live_loading);        mIvRunLoading = (ImageView) findViewById(R.id.iv_run_loading);        mIvRunFold = (ImageView) findViewById(R.id.iv_run_fold);        mTvTip = (TipView) findViewById(R.id.tv_tip);        mTvTip.setIconVisible(false);        mLayoutOperVolBright = (FrameLayout) findViewById(R.id.l_oper_vol_bright);        mIvOperBg = (ImageView) findViewById(R.id.iv_oper_bg);        mPbVolBright = (ProgressBar) findViewById(R.id.pb_vol_bright);        mLvLeftMenu = (ListView) findViewById(R.id.lv_left_menu);        mAttrViewPager = (AttrViewPager) findViewById(R.id.pager);        tabs = (PagerSlidingTabStrip) findViewById(R.id.tabs);        mLayoutContent.setOnClickListener(this);        mIbPlay.setOnClickListener(this);        mIvPlayCenter.setOnClickListener(this);        mIbBack.setOnClickListener(this);        mIbLock.setOnClickListener(this);        mIbScale.setOnClickListener(this);        mSvPlay.setOnClickListener(this);        mSbProgress.setOnSeekBarChangeListener(this);        mLvLeftMenu.setOnItemClickListener(new myOnItemClickListener(Constant.Action.MENU_ITEM_CLICK));        mLvChannels.setOnItemClickListener(new myOnItemClickListener(Constant.Action.CHANNEL_ITEM_CLICK));        mSvPlay.setOnTouchListener(this);        mSlidingMenuLeftAdapter = new SlidingMenuLeftAdapter(this);        mFunnyFrag = new FunnyFrag();        mPictureFrag = new PictureFrag();        mGifFrag = new GifFrag();        mVoiceFrag = new VoiceFrag();        mVideoFrag = new VideoFrag();        frags.add(mFunnyFrag);        frags.add(mPictureFrag);        frags.add(mGifFrag);        frags.add(mVoiceFrag);        frags.add(mVideoFrag);        mViewPagerAdapter = new ViewPagerAdapter(getSupportFragmentManager());        mChannelTask = new ChannelTask(this);        mChannelTask.requestChannelData();        mChannelAdapter = new ChannelAdapter(this);        mChannelAdapter.setChannels(channels);        mLvChannels.setAdapter(mChannelAdapter);        mLvChannels.setOnScrollListener(this);        mPlayer = new Player(getApplicationContext(),mSvPlay,mHandler,null);        mGestureDetector = new GestureDetector(this, new MyGestureListener());        mAudioManager = (AudioManager) getSystemService(Context.AUDIO_SERVICE);        mMaxVolume = mAudioManager.getStreamMaxVolume(AudioManager.STREAM_MUSIC);        setVideoAreaSize();        initScreen();        screenChanged();    }    private void initData () {        leftMenus = getResources().getStringArray(R.array.left_menu_array);        leftMenusIcons = new int[]{R.mipmap.icon_base,R.mipmap.icon_view,R.mipmap.icon_db, R.mipmap.icon_mode, R.mipmap.icon_f2f};        mSlidingMenuLeftAdapter.setLeftMenus(leftMenus);        mSlidingMenuLeftAdapter.setMenuIcons(leftMenusIcons);        mLvLeftMenu.setAdapter(mSlidingMenuLeftAdapter);        titles.add("段子");        titles.add("福利");        titles.add("图片");        titles.add("声音");        titles.add("视频");        List<String> tips = new ArrayList<>();        tips.add("当前频道：湖北卫视HD");        mTvTip.setTipList(tips);        playLive(true);        mHandler.sendEmptyMessageDelayed(Constant.Msg.DRAW_HEART_BUBBLE,2000);        mHttpRequestHelper.sendRequest(Constant.Msg.MEIPAI_CATEGORY_REQUEST);    }    private void showCategory (List<MeiPaiCategoryContentData> datas) {        if (datas != null && datas.size() > 0) {            for (int i=0;i<datas.size();i++) {                titles.add(datas.get(i).name.replace("#",""));                MeiPaiFrag meiPaiFrag = new MeiPaiFrag();                meiPaiFrag.setTag(datas.get(i).id,datas.get(i).type);                frags.add(meiPaiFrag);            }        }        mViewPagerAdapter.setTitles(titles);        mViewPagerAdapter.setFrags(frags);        mAttrViewPager.setAdapter(mViewPagerAdapter);        tabs.setViewPager(mAttrViewPager);    }    private void initLoadingAnimi(){        liveLoadingAnim = (AnimationDrawable) mIvLiveLoading.getBackground();        liveLoadingAnim.start();        runLoadingAnim = (AnimationDrawable) mIvRunLoading.getBackground();        runLoadingAnim.start();    }    private void initScreen () {//        mLeftMenu.toggle();        int mCurrentOrientation = getResources().getConfiguration().orientation;        if ( mCurrentOrientation == Configuration.ORIENTATION_PORTRAIT ) {//竖屏            isFullscreen = false;        } else if ( mCurrentOrientation == Configuration.ORIENTATION_LANDSCAPE ) {//横屏            isFullscreen = true;        }    }    private void startLoadingAimi(){        if (isLive) {            mLayoutTip.setVisibility(View.VISIBLE);        }        if(liveLoadingAnim != null){            liveLoadingAnim.start();        }        if(runLoadingAnim != null){            runLoadingAnim.start();        }        if(mAnimaRotate != null){            mIvRunFold.startAnimation(mAnimaRotate);        }    }    private void stopLoadingAnimi(){        if (isLive) {            mLayoutTip.setVisibility(View.GONE);        }        if(liveLoadingAnim != null){            liveLoadingAnim.stop();        }        if(runLoadingAnim != null){            runLoadingAnim.stop();        }        if(mAnimaRotate != null){            mIvRunFold.clearAnimation();        }        if (!isSeeking) {            hiddenViewAnim();        }    }    private void initAnim(){        //选择动画        mAnimaRotate = AnimationUtils.loadAnimation(this, R.anim.animi_rotate);        mAnimaRotate.setInterpolator(new LinearInterpolator());//重复播放不停顿        mAnimaRotate.setFillAfter(true);//停在最后        //显示View动画        mAnimShowChannels = AnimationUtils.loadAnimation(this, R.anim.channel_translateback);        mAnimShowChannels.setFillAfter(true);        mAnimShowTitleBar = AnimationUtils.loadAnimation(this, R.anim.title_bar_translateback);        mAnimShowTitleBar.setFillAfter(true);        mAnimShowCtrlBar = AnimationUtils.loadAnimation(this, R.anim.ctrl_bar_translateback);        mAnimShowCtrlBar.setFillAfter(true);        //隐藏View动画        mAnimHideChannels = AnimationUtils.loadAnimation(this, R.anim.channel_translate);        mAnimHideChannels.setFillAfter(true);        mAnimHideTitleBar = AnimationUtils.loadAnimation(this, R.anim.title_bar_translate);        mAnimHideTitleBar.setFillAfter(true);        mAnimHideCtrlBar = AnimationUtils.loadAnimation(this, R.anim.ctrl_bar_translate);        mAnimHideCtrlBar.setFillAfter(true);    }    /**     * 播放从下向上移动动画显示view     */    private void showViewAnim() {        mLayoutChannels.setVisibility(View.VISIBLE);        mLayoutTitle.setVisibility(View.VISIBLE);        mLayoutCtrl.setVisibility(View.VISIBLE);        mLayoutChannels.startAnimation(mAnimShowChannels);        mLayoutCtrl.startAnimation(mAnimShowCtrlBar);        mLayoutTitle.startAnimation(mAnimShowTitleBar);        mHandler.removeMessages(Constant.Msg.HIDE_PLAY_CTRL_VIEW);        mHandler.sendEmptyMessageDelayed(Constant.Msg.HIDE_PLAY_CTRL_VIEW, 5000);    }    /**     * 播放从上向下移动动画隐藏view     */    private void hiddenViewAnim() {        mLayoutChannels.startAnimation(mAnimHideChannels);        mLayoutCtrl.startAnimation(mAnimHideCtrlBar);        mLayoutTitle.startAnimation(mAnimHideTitleBar);        mLayoutChannels.setVisibility(View.GONE);        mLayoutTitle.setVisibility(View.GONE);        mLayoutCtrl.setVisibility(View.GONE);        if (view.getSystemUiVisibility() == View.SYSTEM_UI_FLAG_VISIBLE) {            mHandler.sendEmptyMessageDelayed(Constant.Msg.HIDE_ACTION_BAR,3000);        }        if (mLayoutTip.getVisibility() == View.VISIBLE) {            mLayoutTip.setVisibility(View.GONE);        }    }    /**     * 将长时间格式字符串转换为字符串 HH:mm:ss     *     * @param time     * @return String     */    public static String showTime(long time) {        int minute = (int) time / 60;        int hour = (int) minute / 60;        int second = (int) time % 60;        minute %= 60;        return String.format("%02d:%02d:%02d", hour, minute, second);    }    @Override    public void onClick(View view) {        switch (view.getId()) {            case R.id.l_sliding_menu_content://                if (mLeftMenu.isOpen()) {//                    mLeftMenu.toggle();//                }                break;            case R.id.ib_back:                if (isFullscreen) {                    scaleScreen();                    screenChanged();                    return;                }                exitApp();                break;            case R.id.ib_lock:                if (isLock) {                    sou.start(this);                    mIbLock.setImageResource(R.mipmap.icon_unlock);                    isLock = false;                    Toast.makeText(getApplicationContext(),"已解锁，屏幕可以旋转",Toast.LENGTH_SHORT).show();                } else {                    sou.stop();                    mIbLock.setImageResource(R.mipmap.icon_locked);                    isLock = true;                    Toast.makeText(getApplicationContext(),"已锁定，屏幕不可旋转",Toast.LENGTH_SHORT).show();                }                break;            case R.id.ib_play:                if (mPlayer != null && mPlayer.getMediaPlayer() != null) {                    if (mPlayer.getMediaPlayer().isPlaying()) {                        mPlayer.pause();                        mIbPlay.setImageResource(R.mipmap.icon_play);                        mIvPlayCenter.setVisibility(View.VISIBLE);                    } else {                        mPlayer.resume();                        mIbPlay.setImageResource(R.mipmap.icon_pause);                        mIvPlayCenter.setVisibility(View.GONE);                    }                }                break;            case R.id.iv_play_center:                if (mPlayer != null && mPlayer.getMediaPlayer() != null) {                    mPlayer.resume();                    mIbPlay.setImageResource(R.mipmap.icon_pause);                    mIvPlayCenter.setVisibility(View.GONE);                }                break;            case R.id.ib_scale:                scaleScreen();                screenChanged();                break;            case R.id.sv_play:                if (mLayoutCtrl.getVisibility() == View.GONE) {                    showViewAnim();                }                break;        }    }    private void onMenuItemClick(AdapterView<?> parent, View view, int position, long id) {//        if (mLeftMenu.isOpen()) {//            mLeftMenu.toggle();//        }        if (mLayoutSlide.isOpen()) {            mLayoutSlide.closePane();        }        int action = (int) view.getTag();        Intent intent;        switch (action) {            case 0://基础知识                intent = new Intent(MainActivity.this,BaseKnowledgeActivity.class);                startActivity(intent);                break;            case 1://高级View篇                intent = new Intent(MainActivity.this,DraggableGridViewPagerActivity.class);                startActivity(intent);                intent = new Intent(MainActivity.this,DraggableGridViewPagerActivity.class);                startActivity(intent);                break;            case 2://SQLite封装                intent = new Intent(MainActivity.this,DbActivity.class);                startActivity(intent);                break;            case 3://设计模式                intent = new Intent(MainActivity.this,DesignModeActivity.class);                startActivity(intent);                break;            case 4://数据结构                intent = new Intent(MainActivity.this,AlgorithmActivity.class);                startActivity(intent);                break;        }    }    @Override    public void update(Observable observable, Object data) {        if (data instanceof VideoContentData) {            videoContentData = (VideoContentData)data;            int action = videoContentData.getAction();            if (action == Constant.Action.PLAY_VIDEO_ACTION) {                mHandler.sendEmptyMessage(Constant.Msg.PLAY_VIDEO);            }        } else if (data instanceof MeiPaiCategoryData) {            MeiPaiCategoryData info = (MeiPaiCategoryData) data;            Message msg = new Message();            msg.what = Constant.Msg.UPDATE_CATEGORY;            msg.obj = info.meiPaiCategoryContentDatas;            mHandler.sendMessage(msg);        } else if (data instanceof MeiPaiContentData) {            meiPaiContentData = (MeiPaiContentData)data;            mHandler.sendEmptyMessage(meiPaiContentData.action);        } else if (data instanceof Bundle) {            Bundle result = (Bundle) data;            int status = result.getInt(Constant.STATUS_KEY);            int requstMsg = result.getInt(Constant.REQUEST_MSG_KEY);            Message msg = new Message();            msg.arg1 = requstMsg;            switch (status) {                case Constant.Msg.REQUEST_SUCCESS:                    msg.what = Constant.Msg.REQUEST_SUCCESS;                    msg.obj = result.getSerializable(Constant.CHANNEL_DATA_KEY);                    break;                case Constant.Msg.REQUEST_FAILED:                    msg.what = Constant.Msg.REQUEST_FAILED;                    break;                case Constant.Msg.NETWORK_ERROR:                    msg.what = Constant.Msg.NETWORK_ERROR;                    break;                case Constant.Msg.SOCKET_TIME_OUT:                    msg.what = Constant.Msg.SOCKET_TIME_OUT;                    break;            }            if (msg.arg1 == Constant.Msg.CHANNEL_REQUEST) {                mHandler.sendMessage(msg);            }        } else if (data instanceof EpgData) {            EpgData epgData = (EpgData) data;            List<EpgInfo> epgs = EpgUtil.getEpgByTime(epgData);            if (epgData.status == Constant.Msg.REQUEST_SUCCESS) {                if (epgs != null && epgs.size() > 0) {                    Message msg = new Message();                    msg.what = Constant.Msg.SHOW_LIVE_EPG;                    msg.obj = epgs;                    mHandler.sendMessage(msg);                }            }        }    }    private void playVideo() {        isLive = false;        if (mPlayer == null) {            Log.e(TAG, "mPlayer is null");            return;        }        if (isMeiPaiVideo) {            if (meiPaiContentData != null) {                String playUrl = meiPaiContentData.video;                if (!TextUtils.isEmpty(playUrl)) {                    mSvPlay.setVisibility(View.VISIBLE);                    mMtvTitle.setText(meiPaiContentData.caption);                    mPlayer.playUrl(playUrl,false);                }            } else {                Log.e(TAG, "videoContentData == null or mPlayer == null");                mSvPlay.setVisibility(View.VISIBLE);                mMtvTitle.setText("");                mPlayer.playUrl(Constant.DEFAULT_PLAY_URL,false);            }        } else {            if (videoContentData != null) {                String playUrl = videoContentData.getVideoUrl();                if (!TextUtils.isEmpty(playUrl)) {                    mSvPlay.setVisibility(View.VISIBLE);                    mMtvTitle.setText(videoContentData.getText());                    mPlayer.playUrl(playUrl,false);                }            } else {                Log.e(TAG, "videoContentData == null or mPlayer == null");                mSvPlay.setVisibility(View.VISIBLE);                mMtvTitle.setText("");                mPlayer.playUrl(Constant.DEFAULT_PLAY_URL,false);            }        }    }    private void playLive(boolean isPlayLastChannel){        String playUrl = Constant.DEFAULT_PLAY_URL;        String lastPlayUrl = SharePreferencesUtil.getString(this,Constant.CURRENT_PLAY_URL);        String lastPlayName = SharePreferencesUtil.getString(this,Constant.CURRENT_PLAY_NAME);        String lastPlayEpg = SharePreferencesUtil.getString(this,Constant.CURRENT_PLAY_EPG);        if (!TextUtils.isEmpty(lastPlayUrl)) {            playUrl = lastPlayUrl;        }        if (isPlayLastChannel) {            if (mPlayer != null) {                isLive = true;                mSvPlay.setVisibility(View.VISIBLE);                mMtvTitle.setText("播放源：" + playUrl);                mPlayer.playUrl(playUrl,true);            }            List<String> tips = new ArrayList<>();            if (!TextUtils.isEmpty(lastPlayName)) {                tips.add("当前频道：" + lastPlayName);            }            if (TextUtils.isEmpty(lastPlayEpg)) {                mHttpRequestHelper.sendRequestWithParms(Constant.Msg.REQUEST_LIVE_EPG,Constant.DEFAULT_EPG_URL);                return;            }            mHttpRequestHelper.sendRequestWithParms(Constant.Msg.REQUEST_LIVE_EPG,lastPlayEpg);            return;        }        if (channels != null && channels.size() > 0 && currentPosition < channels.size()) {            List<String> tips = new ArrayList<>();            tips.add("当前频道：" + channels.get(currentPosition).getName());            SharePreferencesUtil.putString(this,Constant.CURRENT_PLAY_NAME,channels.get(currentPosition).getName());            mTvTip.setTipList(tips);            String[] playUrls = channels.get(currentPosition).getPlayUrls();            if (livePosition >= playUrls.length) {                livePosition = 0;                mHandler.sendEmptyMessage(Player.PLAYER_ERROR);                return;            }            playUrl = playUrls[livePosition];            SharePreferencesUtil.putString(this,Constant.CURRENT_PLAY_URL,playUrl);            String channelName = channels.get(currentPosition).getName();            String epg = channels.get(currentPosition).getEpg();            SharePreferencesUtil.putString(this,Constant.CURRENT_PLAY_EPG,epg);            if (mPlayer != null) {                isLive = true;                mSvPlay.setVisibility(View.VISIBLE);                mMtvTitle.setText("播放源：" + playUrl);                mPlayer.playUrl(playUrl,true);                if (!TextUtils.isEmpty(epg)) {                    mHttpRequestHelper.sendRequestWithParms(Constant.Msg.REQUEST_LIVE_EPG,epg);                }            }        }    }    @Override    public boolean onKeyDown(int keyCode, KeyEvent event) {        switch (keyCode) {            case KeyEvent.KEYCODE_BACK:                if (isFullscreen) {                    scaleScreen();                    screenChanged();                    return true;                }                exitApp();                break;            case KeyEvent.KEYCODE_MENU:                if (mLayoutTip.getVisibility() == View.VISIBLE) {                    mLayoutTip.setVisibility(View.GONE);                } else {                    mLayoutTip.setVisibility(View.VISIBLE);                }                break;        }        return super.onKeyDown(keyCode, event);    }    private void exitApp () {        if ((System.currentTimeMillis() - exitTime) > 2000) {            Toast.makeText(this, "再按一次退出应用", Toast.LENGTH_SHORT).show();            exitTime = System.currentTimeMillis();            return;        }        finish();    }    @Override    public void onProgressChanged(SeekBar seekBar, int progress, boolean fromUser) {        if (mPlayer != null && mDuration > 0 && progress > 0 && fromUser) {            int curProgress = mSbProgress.getProgress();            mPlayer.seekTo(curProgress * mDuration / 100);        }    }    @Override    public void onStartTrackingTouch(SeekBar seekBar) {        isSeeking = true;    }    @Override    public void onStopTrackingTouch(SeekBar seekBar) {        isSeeking = false;    }    @Override    public boolean onTouch(View view, MotionEvent motionEvent) {        isChannelSelecting = false;        if (mGestureDetector.onTouchEvent(motionEvent)){            return true;        }        switch (motionEvent.getAction()) {            case MotionEvent.ACTION_DOWN:                break;            case MotionEvent.ACTION_MOVE:                break;            case MotionEvent.ACTION_UP:                endGesture();                break;            default:                break;        }        return super.onTouchEvent(motionEvent);    }    @Override    public void onScrollStateChanged(AbsListView view, int scrollState) {        //停止滚动        if (scrollState == AbsListView.OnScrollListener.SCROLL_STATE_IDLE) {            isChannelSelecting = false;            if (mLayoutCtrl.getVisibility() == View.VISIBLE) {                mHandler.removeMessages(Constant.Msg.HIDE_PLAY_CTRL_VIEW);                mHandler.sendEmptyMessageDelayed(Constant.Msg.HIDE_PLAY_CTRL_VIEW,5000);            }        }    }    @Override    public void onScroll(AbsListView view, int firstVisibleItem, int visibleItemCount, int totalItemCount) {        isChannelSelecting = true;    }    class myOnItemClickListener implements AdapterView.OnItemClickListener {        private int action;        public myOnItemClickListener (int action) {            this.action = action;        }        @Override        public void onItemClick(AdapterView<?> parent, View view, int position, long id) {            switch (action) {                case Constant.Action.MENU_ITEM_CLICK:                    onMenuItemClick(parent,view,position,id);                    break;                case Constant.Action.CHANNEL_ITEM_CLICK:                    currentPosition = position;                    isFirstPlayLive = false;                    playLive(false);                    break;            }        }    }    private class MyGestureListener extends GestureDetector.SimpleOnGestureListener {        @Override        public boolean onScroll(MotionEvent e1, MotionEvent e2,                                float distanceX, float distanceY) {            float mOldX = e1.getX(), mOldY = e1.getY();            int x = (int) e2.getRawX();            int y = (int) e2.getRawY();            Display disp = getWindowManager().getDefaultDisplay();            int windowWidth = disp.getWidth();            int windowHeight = disp.getHeight();            Log.e(TAG,"x=" + x);            Log.e(TAG,"y=" + y);            if (mOldX > windowWidth * 4.0 / 5) {//如果是在离屏幕左侧 4/5（即 离屏幕右侧1/5）区域上下滑动则改变音量                onVolumeSlide((mOldY - y) / windowHeight);            } else if (mOldX < windowWidth *1.0 / 5) {//如果是在离屏幕左侧 1/5（区域上下滑动则改变亮度                onBrightnessSlide((mOldY - y) / windowHeight);            } else {                showViewAnim();                double percent = (x - mOldX) / windowWidth;                if (mPlayer != null && mPlayer.getMediaPlayer() != null && mDuration > 0) {                    int current = mPlayer.getMediaPlayer().getCurrentPosition();                    int progress = (int) (current + (percent * mDuration / 100));                    mPlayer.seekTo(progress);                }            }            return super.onScroll(e1, e2, distanceX, distanceY);        }    }    private void onVolumeSlide(float percent) {        if (mLayoutCtrl.getVisibility() == View.GONE) {            showViewAnim();        }        if (mVolume == -1) {            mVolume = mAudioManager.getStreamVolume(AudioManager.STREAM_MUSIC);            if (mVolume < 0)                mVolume = 0;            mIvOperBg.setImageResource(R.mipmap.video_volumn_bg);            mLayoutOperVolBright.setVisibility(View.VISIBLE);        }        mPbVolBright.setMax(mMaxVolume);        int progress = (int) (percent * mMaxVolume) + mVolume;        if (progress > mMaxVolume)            progress = mMaxVolume;        else if (progress < 0)            progress = 0;        mAudioManager.setStreamVolume(AudioManager.STREAM_MUSIC, progress, 0);        mPbVolBright.setProgress(progress);    }    private void onBrightnessSlide(float percent) {        if (mLayoutCtrl.getVisibility() == View.GONE) {            showViewAnim();        }        mPbVolBright.setMax(100);        if (mBrightness < 0) {            mBrightness = getWindow().getAttributes().screenBrightness;            if (mBrightness <= 0.00f)                mBrightness = 0.50f;            if (mBrightness < 0.01f)                mBrightness = 0.01f;            mIvOperBg.setImageResource(R.mipmap.video_brightness_bg);            mLayoutOperVolBright.setVisibility(View.VISIBLE);        }        WindowManager.LayoutParams lpa = getWindow().getAttributes();        lpa.screenBrightness = mBrightness + percent;        if (lpa.screenBrightness > 1.0f) {            lpa.screenBrightness = 1.0f;        }        else if (lpa.screenBrightness < 0.01f) {            lpa.screenBrightness = 0.01f;        }        getWindow().setAttributes(lpa);        double currentBrightness = lpa.screenBrightness * 100;        mPbVolBright.setProgress((int) currentBrightness);    }    private void endGesture() {        mVolume = -1;        mBrightness = -1f;        mLayoutOperVolBright.setVisibility(View.GONE);    }//    @Override//    public boolean onTouchEvent(MotionEvent event) {//        if (mGestureDetector.onTouchEvent(event)){//            return true;//        }//        switch (event.getAction()) {//            case MotionEvent.ACTION_DOWN://                break;//            case MotionEvent.ACTION_MOVE://                break;//            case MotionEvent.ACTION_UP://                endGesture();//                break;//            default://                break;//        }//        return super.onTouchEvent(event);//    }    /**     * 置视频区域大小     */    private void setVideoAreaSize() {        mLayoutHeader.post(new Runnable() {            @Override            public void run() {                int width = mLayoutHeader.getWidth();//                cachedHeight = (int) (width * 3f / 4f);                cachedHeight = (int) (width * 9f / 16f);                ViewGroup.LayoutParams videoLayoutParams = mLayoutHeader.getLayoutParams();                videoLayoutParams.width = ViewGroup.LayoutParams.MATCH_PARENT;                videoLayoutParams.height = cachedHeight;                mLayoutHeader.setLayoutParams(videoLayoutParams);                mLayoutHeader.requestFocus();            }        });    }    private void screenChanged() {        Display dp = getWindowManager().getDefaultDisplay();        int width = dp.getWidth();        int height = dp.getHeight();//        LinearLayout.LayoutParams params = new LinearLayout.LayoutParams(width,height);        ResideLayout.LayoutParams params = new ResideLayout.LayoutParams(width,height);        mLayoutContent.setLayoutParams(params);//        mLeftMenu.toggle();        if (isFullscreen) {            mLayoutSlide.setSlideEnable(false);            showViewAnim();            ViewGroup.LayoutParams layoutParams = mLayoutHeader.getLayoutParams();            layoutParams.width = ViewGroup.LayoutParams.MATCH_PARENT;            layoutParams.height = ViewGroup.LayoutParams.MATCH_PARENT;            mLayoutHeader.setLayoutParams(layoutParams);            mLayoutBottom.setVisibility(View.GONE);            mIbScale.setImageResource(R.mipmap.icon_exit_fullscreen);            view.setSystemUiVisibility(View.SYSTEM_UI_FLAG_FULLSCREEN);            if (isLive) {                mLayoutCtrl.setVisibility(View.GONE);            } else  {                mLayoutCtrl.setVisibility(View.VISIBLE);            }        } else {            mLayoutSlide.setSlideEnable(true);            ViewGroup.LayoutParams layoutParams = mLayoutHeader.getLayoutParams();            layoutParams.width = ViewGroup.LayoutParams.MATCH_PARENT;            layoutParams.height = this.cachedHeight;            mLayoutHeader.setLayoutParams(layoutParams);            mLayoutBottom.setVisibility(View.VISIBLE);            mLayoutChannels.setVisibility(View.GONE);            mIbScale.setImageResource(R.mipmap.icon_scale);            view.setSystemUiVisibility(View.SYSTEM_UI_FLAG_VISIBLE);            mLayoutCtrl.setVisibility(View.VISIBLE);        }    }    private void scaleScreen () {        if (isFullscreen) {            setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_PORTRAIT);            isFullscreen = true;        } else {            setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE);            isFullscreen = false;        }    }    /**     * 心形气泡动感效果     */    private void drawHeartBubble () {        int position[] = new int[2];        HeartBubbleView heartBubbleView = new HeartBubbleView(this);        mIbScale.getLocationInWindow(position);        heartBubbleView.setStartPosition(new Point(position[0], position[1]));        ViewGroup rootView = (ViewGroup) this.getWindow().getDecorView();        rootView.addView(heartBubbleView);        int endPosition[] = new int[2];        mIbLock.getLocationInWindow(endPosition);        heartBubbleView.setEndPosition(new Point(endPosition[0], endPosition[1]));// y 为0 到顶部，x为随机生成        heartBubbleView.startBeizerAnimation();    }    @Override    public void onSaveInstanceState(Bundle outState, PersistableBundle outPersistentState) {        super.onSaveInstanceState(outState, outPersistentState);        Log.e(TAG, "onSaveInstanceState()......");    }    @Override    public void onConfigurationChanged(Configuration newConfig) {        super.onConfigurationChanged(newConfig);        Log.e(TAG, "onConfigurationChanged()......");        initScreen();        screenChanged();    }    @Override    protected void onRestoreInstanceState(Bundle savedInstanceState) {        super.onRestoreInstanceState(savedInstanceState);        Log.e(TAG, "onRestoreInstanceState()......");    }    @Override    protected void onStart() {        super.onStart();        Log.e(TAG, "onStart()......");        if (!isLock) {            sou.start(this);        }    }    @Override    protected void onPause() {        super.onPause();        Log.e(TAG, "onPause()......");    }    @Override    protected void onResume() {        Log.e(TAG, "onResume()......");        super.onResume();    }    @Override    protected void onStop() {        super.onStop();        Log.e(TAG, "onStop()......");        sou.stop();    }    @Override    protected void onDestroy() {        if(mPlayer != null){            mPlayer.stop();            mPlayer.close();        }        if (mHttpRequestHelper != null) {            mHttpRequestHelper.onDestroy();        }        super.onDestroy();        android.os.Process.killProcess(android.os.Process.myPid());//获取PID        Log.e(TAG, "onDestroy()......");    }}