package flowfunny.victor.com;import android.content.Context;import android.media.AudioManager;import android.os.Bundle;import android.os.Handler;import android.os.Message;import android.support.v7.app.AppCompatActivity;import android.util.Log;import android.view.Display;import android.view.GestureDetector;import android.view.MotionEvent;import android.view.SurfaceView;import android.view.View;import android.view.ViewGroup;import android.view.WindowManager;import android.view.animation.Animation;import android.view.animation.TranslateAnimation;import android.widget.Button;import android.widget.FrameLayout;import android.widget.ImageButton;import android.widget.ImageView;import android.widget.LinearLayout;import android.widget.ProgressBar;import android.widget.RelativeLayout;import android.widget.SeekBar;import android.widget.SeekBar.OnSeekBarChangeListener;import android.widget.TextView;import android.widget.Toast;import data.victor.com.VideoContentData;import module.victor.com.Player;import util.victor.com.Constant;import view.victor.com.CircularProgress;import view.victor.com.MovingTextView;public class VideoPlayActivity extends AppCompatActivity implements View.OnClickListener,OnSeekBarChangeListener{    private String TAG = "VideoPlayActivity";    private View view;    private CircularProgress mSpProgress;    private MovingTextView mMtvTitle;    private SurfaceView mSvVideoPlay;    private LinearLayout mLayoutTitle;    private RelativeLayout mLayoutCtrl;    private FrameLayout mLayoutOperVolBright;    private ImageView mIvPlayCenter,mIvOperBg;    private ProgressBar mPbVolBright;    private SeekBar mSbProgress;    private TextView mTvPassTime,mTvLongTime;    private ImageButton mIbScale,mIbPlay;    private Player mPlayer;    private int mDuration = 0;//影片时长    private VideoContentData videoContentData;    private TranslateAnimation mShowCtrlAction,mHiddenCtrlAction,mShowTitleAction,mHiddenTitleAction;    private boolean isSeeking;//正在拖到进度    private int mMaxVolume;    private int mVolume = -1;    private float mBrightness = -1f;    private GestureDetector mGestureDetector;    private AudioManager mAudioManager;    float xLast,yLast;    Handler mHandler = new Handler(){        @Override        public void handleMessage(Message msg) {            switch (msg.what) {                case Player.PLAYER_PREPARING:                    mSpProgress.setVisibility(View.VISIBLE);                    mLayoutTitle.setVisibility(View.VISIBLE);                    mLayoutCtrl.setVisibility(View.VISIBLE);                    break;                case Player.PLAYER_PREPARED:                    mSpProgress.setVisibility(View.GONE);                    mLayoutTitle.setVisibility(View.GONE);                    mLayoutCtrl.setVisibility(View.GONE);                    mDuration = mPlayer.getMediaPlayer().getDuration();                    if (mDuration > 0) {                        String longTime = showTime(mDuration / 1000);                        mTvLongTime.setText(longTime);                    }                    break;                case Player.PLAYER_ERROR:                    mSpProgress.setVisibility(View.GONE);                    mLayoutTitle.setVisibility(View.GONE);                    mLayoutCtrl.setVisibility(View.GONE);                    break;                case Player.PLAYER_BUFFERING_START:                    mSpProgress.setVisibility(View.VISIBLE);                    mLayoutTitle.setVisibility(View.VISIBLE);                    mLayoutCtrl.setVisibility(View.VISIBLE);                    break;                case Player.PLAYER_BUFFERING_END:                    mSpProgress.setVisibility(View.GONE);                    mLayoutTitle.setVisibility(View.GONE);                    mLayoutCtrl.setVisibility(View.GONE);                    break;//                case Player.PLAYER_REPLAY://                    mSpProgress.setVisibility(View.VISIBLE);//                    mLayoutTitle.setVisibility(View.VISIBLE);//                    mLayoutCtrl.setVisibility(View.VISIBLE);//                    break;                case Player.PLAYER_PROGRESS_INFO:                    if (mPlayer != null && mPlayer.getMediaPlayer() != null) {                        int elapseMsec = mPlayer.getMediaPlayer().getCurrentPosition();                        String mTimePass= showTime(elapseMsec / 1000);                        String videoTime = mTimePass;                        mTvPassTime.setText(videoTime);                        if (mDuration > 0) {                            int progress = elapseMsec * 100 / mDuration;                            mSbProgress.setProgress(progress);                        }                    }                    break;                case Player.PLAYER_COMPLETE:                    finish();                    break;                case Constant.Msg.HIDE_PLAY_CTRL_VIEW:                    if (!isSeeking) {                        hiddenCtrlViewAnim(mLayoutCtrl);                    }                    break;                case Constant.Msg.HIDE_PLAY_TITLE_VIEW:                    if (!isSeeking) {                        hiddenTitleViewAnim(mLayoutTitle);                    }                    break;            }        }    };    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        view = getLayoutInflater().from(this).inflate(R.layout.activity_video_play,null);        setContentView(view);        view.setSystemUiVisibility(View.SYSTEM_UI_FLAG_FULLSCREEN);        initialize();        initAnim();        initData();    }    private void initialize () {        mSpProgress = (CircularProgress) view.findViewById(R.id.cp_progress);        mSvVideoPlay = (SurfaceView) view.findViewById(R.id.sv_video_play);        mMtvTitle = (MovingTextView) findViewById(R.id.mtv_title);        mLayoutCtrl = (RelativeLayout) view.findViewById(R.id.rl_ctrl);        mSbProgress = (SeekBar) view.findViewById(R.id.sb_progress);        mLayoutTitle = (LinearLayout) view.findViewById(R.id.l_title);        mLayoutOperVolBright = (FrameLayout) view.findViewById(R.id.l_oper_vol_bright);        mIvOperBg = (ImageView) view.findViewById(R.id.iv_oper_bg);        mPbVolBright = (ProgressBar) view.findViewById(R.id.pb_vol_bright);        mIvPlayCenter = (ImageView) findViewById(R.id.iv_play_center);        mIbPlay = (ImageButton) view.findViewById(R.id.ib_play);        mIbScale = (ImageButton) findViewById(R.id.ib_scale);        mIbScale.setImageResource(R.mipmap.icon_exit_fullscreen);        mTvPassTime = (TextView) findViewById(R.id.tv_pass_time);        mTvLongTime = (TextView) findViewById(R.id.tv_long_time);        mPlayer = new Player(getApplicationContext(),mSvVideoPlay,mHandler,null);        mSbProgress.setOnSeekBarChangeListener(this);        mIbPlay.setOnClickListener(this);        mIbScale.setOnClickListener(this);        mIvPlayCenter.setOnClickListener(this);    }    private void initData () {        Bundle bundle = this.getIntent().getExtras();        videoContentData = (VideoContentData) bundle.getSerializable(Constant.VIDEO_PLAY_DATA);        if (videoContentData != null && mPlayer != null) {            String playUrl = videoContentData.getVideoUrl();            mMtvTitle.setText(videoContentData.getText());            mPlayer.playUrl(playUrl,false);        } else {            Log.e(TAG,"videoContentData == null or mPlayer == null");            mPlayer.playUrl(Constant.DEFAULT_PLAY_URL,false);        }        mGestureDetector = new GestureDetector(this, new MyGestureListener());        mAudioManager = (AudioManager) getSystemService(Context.AUDIO_SERVICE);        mMaxVolume = mAudioManager.getStreamMaxVolume(AudioManager.STREAM_MUSIC);    }    private void initAnim(){        mShowCtrlAction = new TranslateAnimation(                Animation.RELATIVE_TO_SELF, 0.0f,                Animation.RELATIVE_TO_SELF, 0.0f,                Animation.RELATIVE_TO_SELF, 1.0f,                Animation.RELATIVE_TO_SELF, 0.0f);        mShowCtrlAction.setDuration(300);        mHiddenCtrlAction = new TranslateAnimation(                Animation.RELATIVE_TO_SELF, 0.0f,                Animation.RELATIVE_TO_SELF, 0.0f,                Animation.RELATIVE_TO_SELF, 0.0f,                Animation.RELATIVE_TO_SELF, 1.0f);        mHiddenCtrlAction.setDuration(300);        ////////////////////////////////////////////        mShowTitleAction = new TranslateAnimation(                Animation.RELATIVE_TO_SELF, 0.0f,                Animation.RELATIVE_TO_SELF, 0.0f,                Animation.RELATIVE_TO_SELF, 0.0f,                Animation.RELATIVE_TO_SELF, 1.0f);        mShowTitleAction.setDuration(300);        mHiddenTitleAction = new TranslateAnimation(                Animation.RELATIVE_TO_SELF, 0.0f,                Animation.RELATIVE_TO_SELF, 0.0f,                Animation.RELATIVE_TO_SELF, 1.0f,                Animation.RELATIVE_TO_SELF, 0.0f);        mHiddenTitleAction.setDuration(300);    }    /**     * 播放从右向左移动动画显示view     * @param view     */    private void showCtrlViewAnim(View view) {        view.startAnimation(mShowCtrlAction);        view.setVisibility(View.VISIBLE);        mHandler.removeMessages(Constant.Msg.HIDE_PLAY_CTRL_VIEW);        mHandler.sendEmptyMessageDelayed(Constant.Msg.HIDE_PLAY_CTRL_VIEW, 5000);    }    /**     * 播放从左向右移动动画隐藏view     * @param view     */    private void hiddenCtrlViewAnim(View view) {        view.startAnimation(mHiddenCtrlAction);        view.setVisibility(View.GONE);    }    /**     * 播放从右向左移动动画显示view     * @param view     */    private void showTitleViewAnim(View view) {        view.startAnimation(mShowTitleAction);        view.setVisibility(View.VISIBLE);        mHandler.removeMessages(Constant.Msg.HIDE_PLAY_TITLE_VIEW);        mHandler.sendEmptyMessageDelayed(Constant.Msg.HIDE_PLAY_TITLE_VIEW, 5000);    }    /**     * 播放从左向右移动动画隐藏view     * @param view     */    private void hiddenTitleViewAnim(View view) {        view.startAnimation(mHiddenTitleAction);        view.setVisibility(View.GONE);    }    /**     * 将长时间格式字符串转换为字符串 HH:mm:ss     *     * @param time     * @return String     */    public static String showTime(long time) {        int minute = (int) time / 60;        int hour = (int) minute / 60;        int second = (int) time % 60;        minute %= 60;        return String.format("%02d:%02d:%02d", hour, minute, second);    }    @Override    public void onClick(View view) {        switch (view.getId()) {            case R.id.ib_scale:                finish();                break;            case R.id.ib_play:                if (mPlayer != null && mPlayer.getMediaPlayer() != null) {                    if (mPlayer.getMediaPlayer().isPlaying()) {                        mPlayer.pause();                        mIbPlay.setImageResource(R.mipmap.icon_play);                        mIvPlayCenter.setVisibility(View.VISIBLE);                    } else {                        mPlayer.resume();                        mIbPlay.setImageResource(R.mipmap.icon_pause);                        mIvPlayCenter.setVisibility(View.GONE);                    }                }                break;            case R.id.iv_play_center:                if (mPlayer != null && mPlayer.getMediaPlayer() != null) {                    mPlayer.resume();                    mIbPlay.setImageResource(R.mipmap.icon_pause);                    mIvPlayCenter.setVisibility(View.GONE);                }                break;        }    }    @Override    protected void onDestroy() {        if(mPlayer != null){            mPlayer.stop();            mPlayer.close();        }        super.onDestroy();    }    @Override    public void onProgressChanged(SeekBar seekBar, int progress, boolean fromUser) {        if (mPlayer != null && mDuration > 0 && progress > 0 && fromUser) {            int curProgress = mSbProgress.getProgress();            mPlayer.seekTo(curProgress * mDuration / 100);        }    }    @Override    public void onStartTrackingTouch(SeekBar seekBar) {        isSeeking = true;    }    @Override    public void onStopTrackingTouch(SeekBar seekBar) {        isSeeking = false;    }    private class MyGestureListener extends GestureDetector.SimpleOnGestureListener {        @Override        public boolean onScroll(MotionEvent e1, MotionEvent e2,                                float distanceX, float distanceY) {            float mOldX = e1.getX(), mOldY = e1.getY();            int x = (int) e2.getRawX();            int y = (int) e2.getRawY();            Display disp = getWindowManager().getDefaultDisplay();            int windowWidth = disp.getWidth();            int windowHeight = disp.getHeight();            if (mOldX > windowWidth * 4.0 / 5) {//如果是在离屏幕左侧 4/5（即 离屏幕右侧1/5）区域上下滑动则改变音量                onVolumeSlide((mOldY - y) / windowHeight);            } else if (mOldX < windowWidth *1.0 / 5) {//如果是在离屏幕左侧 1/5（区域上下滑动则改变亮度                onBrightnessSlide((mOldY - y) / windowHeight);            } else {                showTitleViewAnim(mLayoutTitle);                showCtrlViewAnim(mLayoutCtrl);                double percent = (x - mOldX) / windowWidth;                if (mPlayer != null && mPlayer.getMediaPlayer() != null && mDuration > 0) {                    int current = mPlayer.getMediaPlayer().getCurrentPosition();                    int progress = (int) (current + (percent * mDuration / 100));                    mPlayer.seekTo(progress);                }            }            return super.onScroll(e1, e2, distanceX, distanceY);        }    }    private void onVolumeSlide(float percent) {        if (mLayoutCtrl.getVisibility() == View.GONE) {            showTitleViewAnim(mLayoutTitle);            showCtrlViewAnim(mLayoutCtrl);        }        if (mVolume == -1) {            mVolume = mAudioManager.getStreamVolume(AudioManager.STREAM_MUSIC);            if (mVolume < 0)                mVolume = 0;            mIvOperBg.setImageResource(R.mipmap.video_volumn_bg);            mLayoutOperVolBright.setVisibility(View.VISIBLE);        }        mPbVolBright.setMax(mMaxVolume);        int progress = (int) (percent * mMaxVolume) + mVolume;        if (progress > mMaxVolume)            progress = mMaxVolume;        else if (progress < 0)            progress = 0;        mAudioManager.setStreamVolume(AudioManager.STREAM_MUSIC, progress, 0);        mPbVolBright.setProgress(progress);    }    private void onBrightnessSlide(float percent) {        if (mLayoutCtrl.getVisibility() == View.GONE) {            showTitleViewAnim(mLayoutTitle);            showCtrlViewAnim(mLayoutCtrl);        }        mPbVolBright.setMax(100);        if (mBrightness < 0) {            mBrightness = getWindow().getAttributes().screenBrightness;            if (mBrightness <= 0.00f)                mBrightness = 0.50f;            if (mBrightness < 0.01f)                mBrightness = 0.01f;            mIvOperBg.setImageResource(R.mipmap.video_brightness_bg);            mLayoutOperVolBright.setVisibility(View.VISIBLE);        }        WindowManager.LayoutParams lpa = getWindow().getAttributes();        lpa.screenBrightness = mBrightness + percent;        if (lpa.screenBrightness > 1.0f) {            lpa.screenBrightness = 1.0f;        }        else if (lpa.screenBrightness < 0.01f) {            lpa.screenBrightness = 0.01f;        }        getWindow().setAttributes(lpa);        double currentBrightness = lpa.screenBrightness * 100;        mPbVolBright.setProgress((int) currentBrightness);    }    private void endGesture() {        mVolume = -1;        mBrightness = -1f;        mLayoutOperVolBright.setVisibility(View.GONE);    }    @Override    public boolean onTouchEvent(MotionEvent event) {        if (mGestureDetector.onTouchEvent(event)){            return true;        }        switch (event.getAction()) {            case MotionEvent.ACTION_DOWN:                break;            case MotionEvent.ACTION_MOVE:                break;            case MotionEvent.ACTION_UP:                endGesture();            break;            default:                break;        }        return super.onTouchEvent(event);    }}