package frag.victor.com;import android.content.Context;import android.content.Intent;import android.os.Bundle;import android.os.Handler;import android.os.Message;import android.support.annotation.Nullable;import android.support.v4.app.Fragment;import android.util.Log;import android.view.LayoutInflater;import android.view.View;import android.view.ViewGroup;import android.widget.AdapterView;import android.widget.TextView;import android.widget.Toast;import java.text.SimpleDateFormat;import java.util.ArrayList;import java.util.Date;import java.util.List;import java.util.Observable;import java.util.Observer;import adapter.victor.com.FunnyAdapter;import data.victor.com.FunnyContentData;import data.victor.com.FunnyData;import mode.victor.com.DataObservable;import util.victor.com.Constant;import util.victor.com.DateUtil;import util.victor.com.HttpRequestHelper;import view.victor.com.CircularProgress;import view.victor.com.XListView;import flowfunny.victor.com.R;public class FunnyFrag extends Fragment implements Observer,XListView.IXListViewListener,AdapterView.OnItemLongClickListener {	private String TAG = "FunnyFrag";	private CircularProgress mCpProgress;	private XListView mLvFunny;	private FunnyAdapter mFunnyAdapter;	private List<FunnyContentData> funnyConnentDatas = new ArrayList<FunnyContentData>();	private HttpRequestHelper mHttpRequestHelper;	private  int currentPage = 1;//当前页数	private int countPages;//总页数	private Context mContext;	Handler mHandler = new Handler(){		@Override		public void handleMessage(Message msg) {			switch (msg.what){				case Constant.Msg.REQUEST_SUCCESS:					mLvFunny.setPullLoadEnable(true);					mCpProgress.setVisibility(View.GONE);					funnyConnentDatas.addAll((List<FunnyContentData>) msg.obj);					mFunnyAdapter.setFunnyConnentDatas(funnyConnentDatas);					mFunnyAdapter.notifyDataSetChanged();					mLvFunny.setRefreshTime(DateUtil.getTodayTime());					if(currentPage == countPages){						mLvFunny.setPullLoadEnable(false);					} else {						mLvFunny.setPullLoadEnable(true);					}					break;				case Constant.Msg.REQUEST_SUCCESS_NO_DATA:					mCpProgress.setVisibility(View.GONE);					if (currentPage == 1) {						funnyConnentDatas.clear();						mLvFunny.setPullLoadEnable(false);						mFunnyAdapter.notifyDataSetChanged();					}					if (mContext != null){						Toast.makeText(mContext,"服务器没有数据！",Toast.LENGTH_SHORT).show();					}					break;				case Constant.Msg.REQUEST_FAILED:					mCpProgress.setVisibility(View.GONE);					if (currentPage == 1) {						funnyConnentDatas.clear();						mLvFunny.setPullLoadEnable(false);						mFunnyAdapter.notifyDataSetChanged();					}					if (mContext != null){						Toast.makeText(mContext,"访问服务器失败！",Toast.LENGTH_SHORT).show();					}					break;				case Constant.Msg.PARSING_EXCEPTION:					mCpProgress.setVisibility(View.GONE);					if (currentPage == 1) {						funnyConnentDatas.clear();						mLvFunny.setPullLoadEnable(false);						mFunnyAdapter.notifyDataSetChanged();					}					if (mContext != null){						Toast.makeText(mContext,"数据解析异常！",Toast.LENGTH_SHORT).show();					}					break;				case Constant.Msg.NETWORK_ERROR:					mCpProgress.setVisibility(View.GONE);					if (currentPage == 1) {						funnyConnentDatas.clear();						mLvFunny.setPullLoadEnable(false);						mFunnyAdapter.notifyDataSetChanged();					}					if (mContext != null){						Toast.makeText(mContext,"网络错误，请检查网络是否连接！",Toast.LENGTH_SHORT).show();					}					break;				case Constant.Msg.SOCKET_TIME_OUT:					mCpProgress.setVisibility(View.GONE);					if (currentPage == 1) {						funnyConnentDatas.clear();						mLvFunny.setPullLoadEnable(false);						mFunnyAdapter.notifyDataSetChanged();					}					if (mContext != null){						Toast.makeText(mContext,"访问服务器超时，请重试！",Toast.LENGTH_SHORT).show();					}					break;			}		}	};	@Override	public void onActivityCreated(@Nullable Bundle savedInstanceState) {		super.onActivityCreated(savedInstanceState);		mContext = getContext();	}	@Override	public View onCreateView(LayoutInflater inflater, ViewGroup container,Bundle savedInstanceState) {		View view = inflater.inflate(R.layout.frag_funny,container, false);		initialize (view);		DataObservable.getInstance().addObserver(this);		return view;	}	private void initialize (View view) {		mCpProgress = (CircularProgress) view.findViewById(R.id.cp_progress);		mLvFunny = (XListView) view.findViewById(R.id.lv_funny_frag);		mLvFunny.setPullLoadEnable(false);		mLvFunny.setXListViewListener(this);		mFunnyAdapter = new FunnyAdapter(getContext(),mLvFunny);		mFunnyAdapter.setFunnyConnentDatas(funnyConnentDatas);		mLvFunny.setAdapter(mFunnyAdapter);		mLvFunny.setOnItemLongClickListener(this);		mHttpRequestHelper = new HttpRequestHelper(getContext());		requestFunnyDatas();	}	@Override	public void update(Observable observable, Object data) {		Log.e(TAG, "update()......");		if (data instanceof FunnyData) {			FunnyData funnyData = (FunnyData) data;			int status = funnyData.getStatus();			Log.e(TAG,"update()......status=" + status);			Message msg = new Message();			switch (status) {				case Constant.Msg.REQUEST_SUCCESS:					msg.what = Constant.Msg.REQUEST_SUCCESS;					msg.obj = funnyData.getFunnyConnentDatas();					countPages = funnyData.getAllPages();					break;				case Constant.Msg.REQUEST_SUCCESS_NO_DATA:					msg.what = Constant.Msg.REQUEST_SUCCESS_NO_DATA;					break;				case Constant.Msg.REQUEST_FAILED:					msg.what = Constant.Msg.REQUEST_FAILED;					break;				case Constant.Msg.PARSING_EXCEPTION:					msg.what = Constant.Msg.PARSING_EXCEPTION;					break;				case Constant.Msg.NETWORK_ERROR:					msg.what = Constant.Msg.NETWORK_ERROR;					break;				case Constant.Msg.SOCKET_TIME_OUT:					msg.what = Constant.Msg.SOCKET_TIME_OUT;					break;			}			mHandler.sendMessage(msg);		}	}	private void onLoad() {		mLvFunny.stopRefresh();		mLvFunny.stopLoadMore();		mLvFunny.setRefreshTime(DateUtil.getTodayTime());	}	@Override	public void onRefresh() {		funnyConnentDatas.clear();		currentPage --;		if (currentPage < 1){			currentPage = 1;		}		requestFunnyDatas();		onLoad();	}	@Override	public void onLoadMore() {		funnyConnentDatas.clear();		currentPage ++;		requestFunnyDatas();		onLoad();	}	private void requestFunnyDatas () {		if (mHttpRequestHelper != null) {			mCpProgress.setVisibility(View.VISIBLE);			SimpleDateFormat sdf = new SimpleDateFormat(Constant.TIME_FORMAT);			String time = sdf.format(new Date());			String requestUrl = String.format(Constant.BUDEJIE_URL,currentPage,Constant.Action.FUNNY_ACTION,Constant.APP_ID,Constant.APP_SECRET,time);			mHttpRequestHelper.sendRequestWithParms(Constant.Msg.FUNNY_REQUEST, requestUrl);		}	}	@Override	public void onDestroy() {		if (mHttpRequestHelper != null) {			mHttpRequestHelper.onDestroy();		}		super.onDestroy();	}	@Override	public boolean onItemLongClick(AdapterView<?> parent, View view, int position, long id) {		if (funnyConnentDatas != null && funnyConnentDatas.size() > 0) {			if (position < funnyConnentDatas.size() + 1) {				String funnyContent = funnyConnentDatas.get(position - 1).getText();				Intent intentshare = new Intent(Intent.ACTION_SEND);				intentshare.setType("text/plain")						.putExtra(Intent.EXTRA_SUBJECT, "分享")						.putExtra(Intent.EXTRA_TEXT,funnyContent);				Intent.createChooser(intentshare, "分享");				startActivity(intentshare);			}		}		return false;	}}