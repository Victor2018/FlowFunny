package frag.victor.com;import android.content.Context;import android.content.Intent;import android.os.Bundle;import android.os.Handler;import android.os.Message;import android.support.v4.app.Fragment;import android.support.v4.widget.SwipeRefreshLayout;import android.support.v7.widget.GridLayoutManager;import android.support.v7.widget.LinearLayoutManager;import android.support.v7.widget.OrientationHelper;import android.support.v7.widget.RecyclerView;import android.support.v7.widget.RecyclerView.OnScrollListener;import android.support.v7.widget.StaggeredGridLayoutManager;import android.view.LayoutInflater;import android.view.View;import android.view.ViewGroup;import android.widget.Toast;import java.util.ArrayList;import java.util.List;import java.util.Observable;import java.util.Observer;import adapter.victor.com.MeiPaiAdapter;import adapter.victor.com.PictureAdapter;import data.victor.com.MeiPaiContentData;import data.victor.com.MeiPaiData;import data.victor.com.PictureContentData;import data.victor.com.PictureData;import data.victor.com.VideoContentData;import flowfunny.victor.com.R;import mode.victor.com.DataObservable;import util.victor.com.Constant;import util.victor.com.HttpRequestHelper;import view.victor.com.CircularProgress;public class MeiPaiFrag extends Fragment implements Observer,SwipeRefreshLayout.OnRefreshListener {	private String TAG = "MeiPaiFrag";	private SwipeRefreshLayout swipeRefreshLayout;	private RecyclerView mRvPicture;	private MeiPaiAdapter meiPaiAdapter;	private List<MeiPaiContentData> meiPaiContentDatas = new ArrayList<>();	private HttpRequestHelper mHttpRequestHelper;	private  int currentPage = 1;//当前页数	private LinearLayoutManager linearLayoutManager;	private GridLayoutManager gridLayoutManager;	private StaggeredGridLayoutManager staggeredGridLayoutManager;	private boolean isLoading;	private Context mContext;	private int currentPlayPosition;	private int id;	private int type;	Handler mHandler = new Handler(){		@Override		public void handleMessage(Message msg) {			switch (msg.what){				case Constant.Msg.REQUEST_SUCCESS:					isLoading = false;					swipeRefreshLayout.setRefreshing(false);					List<MeiPaiContentData> curPageDatas = (List<MeiPaiContentData>) msg.obj;					meiPaiContentDatas.addAll(curPageDatas);					meiPaiAdapter.setMeiPaiContentDatas(meiPaiContentDatas);					if(curPageDatas.size() < Constant.PAGE_SIZE){						meiPaiAdapter.setFooterVisible(false);					} else {						meiPaiAdapter.setFooterVisible(true);					}					break;				case Constant.Msg.REQUEST_SUCCESS_NO_DATA:					if (currentPage == 1) {						meiPaiContentDatas.clear();						meiPaiAdapter.setFooterVisible(false);						meiPaiAdapter.notifyDataSetChanged();					}					if (mContext != null){						Toast.makeText(mContext,"服务器没有数据！",Toast.LENGTH_SHORT).show();					}					break;				case Constant.Msg.REQUEST_FAILED:					if (currentPage == 1) {						meiPaiContentDatas.clear();						meiPaiAdapter.setFooterVisible(false);						meiPaiAdapter.notifyDataSetChanged();					}					if (mContext != null){						Toast.makeText(mContext,"访问服务器失败！",Toast.LENGTH_SHORT).show();					}					break;				case Constant.Msg.PARSING_EXCEPTION:					if (currentPage == 1) {						meiPaiContentDatas.clear();						meiPaiAdapter.setFooterVisible(false);					}					if (mContext != null){						Toast.makeText(mContext,"数据解析异常！",Toast.LENGTH_SHORT).show();					}					break;				case Constant.Msg.NETWORK_ERROR:					if (currentPage == 1) {						meiPaiContentDatas.clear();						meiPaiAdapter.setFooterVisible(false);					}					if (mContext != null){						Toast.makeText(mContext,"网络错误，请检查网络是否连接！",Toast.LENGTH_SHORT).show();					}					break;				case Constant.Msg.SOCKET_TIME_OUT:					if (currentPage == 1) {						meiPaiContentDatas.clear();						meiPaiAdapter.setFooterVisible(false);					}					if (mContext != null){						Toast.makeText(mContext,"访问服务器超时，请重试！",Toast.LENGTH_SHORT).show();					}					break;				case Constant.Action.SHARE_MEIPAI:					Intent intentshare = new Intent(Intent.ACTION_SEND);					intentshare.setType("text/plain")							.putExtra(Intent.EXTRA_SUBJECT, "分享")							.putExtra(Intent.EXTRA_TEXT,"给你分享一个美拍视频：" + msg.obj);					Intent.createChooser(intentshare, "分享");					startActivity(intentshare);					break;			}		}	};	public void setTag (int id,int type) {		this.id = id;		this.type = type;	}	@Override	public void onActivityCreated(Bundle savedInstanceState) {		super.onActivityCreated(savedInstanceState);		mContext = getContext();	}	@Override	public View onCreateView(LayoutInflater inflater, ViewGroup container,Bundle savedInstanceState) {		View view = inflater.inflate(R.layout.frag_meipai,container, false);		initialize (view);		DataObservable.getInstance().addObserver(this);		return view;	}	private void initialize (View view) {		swipeRefreshLayout = (SwipeRefreshLayout) view.findViewById(R.id.srl_fresh);		mRvPicture = (RecyclerView) view.findViewById(R.id.rv_meipai);		//设置 进度条的颜色变化，最多可以设置4种颜色		swipeRefreshLayout.setColorSchemeResources(android.R.color.holo_purple, android.R.color.holo_blue_bright,				android.R.color.holo_orange_light, android.R.color.holo_red_light);		swipeRefreshLayout.setOnRefreshListener(this);		linearLayoutManager = new LinearLayoutManager(getContext());//这里用线性显示 类似于listview		gridLayoutManager = new GridLayoutManager(getContext(), 2);//这里用线性宫格显示 类似于grid view		staggeredGridLayoutManager = new StaggeredGridLayoutManager(2, OrientationHelper.VERTICAL);//这里用线性宫格显示 类似于瀑布流		//设置头部及底部View占据整行空间		gridLayoutManager.setSpanSizeLookup(new GridLayoutManager.SpanSizeLookup() {			@Override			public int getSpanSize(int position) {				return (meiPaiAdapter.isHeaderView(position) || meiPaiAdapter.isBottomView(position)) ? gridLayoutManager.getSpanCount() : 1;			}		});		mRvPicture.setLayoutManager(linearLayoutManager);		meiPaiAdapter = new MeiPaiAdapter(getContext());		meiPaiAdapter.setMeiPaiContentDatas(meiPaiContentDatas);		meiPaiAdapter.setHeaderVisible(false);		meiPaiAdapter.setFooterVisible(false);		mRvPicture.setAdapter(meiPaiAdapter);		mRvPicture.addOnScrollListener(new OnScrollListener() {			@Override			public void onScrollStateChanged(RecyclerView recyclerView, int newState) {				super.onScrollStateChanged(recyclerView, newState);			}			@Override			public void onScrolled(RecyclerView recyclerView, int dx, int dy) {				super.onScrolled(recyclerView, dx, dy);				int lastVisibleItemPosition = linearLayoutManager.findLastVisibleItemPosition();				if (lastVisibleItemPosition + 1 == meiPaiAdapter.getItemCount()) {					boolean isRefreshing = swipeRefreshLayout.isRefreshing();					if (isRefreshing) {						meiPaiContentDatas.clear();						meiPaiAdapter.notifyDataSetChanged();						return;					}					if (!isLoading) {						isLoading = true;						currentPage ++;						requestMeiPaiDatas();					}				}			}		});		mHttpRequestHelper = new HttpRequestHelper(getContext());		requestMeiPaiDatas();	}	@Override	public void update(Observable observable, Object data) {		if (data instanceof MeiPaiData) {			MeiPaiData meiPaiData = (MeiPaiData) data;			int status = meiPaiData.status;			Message msg = new Message();			switch (status) {				case Constant.Msg.REQUEST_SUCCESS:					msg.what = Constant.Msg.REQUEST_SUCCESS;					msg.obj = meiPaiData.meiPaiContentDatas;					break;				case Constant.Msg.REQUEST_SUCCESS_NO_DATA:					msg.what = Constant.Msg.REQUEST_SUCCESS_NO_DATA;					break;				case Constant.Msg.REQUEST_FAILED:					msg.what = Constant.Msg.REQUEST_FAILED;					break;				case Constant.Msg.PARSING_EXCEPTION:					msg.what = Constant.Msg.PARSING_EXCEPTION;					break;				case Constant.Msg.NETWORK_ERROR:					msg.what = Constant.Msg.NETWORK_ERROR;					break;				case Constant.Msg.SOCKET_TIME_OUT:					msg.what = Constant.Msg.SOCKET_TIME_OUT;					break;			}			if (meiPaiData.id == id) {				mHandler.sendMessage(msg);			}		} else if (data instanceof Bundle) {			Bundle bundle = (Bundle) data;			int action = bundle.getInt(Constant.ACTION_KEY);			if (action == Constant.Action.SHARE_MEIPAI) {				String imgUrl = ((Bundle) data).getString(Constant.INTENT_DATA_KEY);				Message msg = new Message();				msg.what = Constant.Action.SHARE_MEIPAI;				msg.obj = imgUrl;				mHandler.sendMessage(msg);			}		} else if (data instanceof MeiPaiContentData) {			MeiPaiContentData info = (MeiPaiContentData) data;			currentPlayPosition = info.position;		} else if (data instanceof Integer) {			int action = (int) data;			if (action == Constant.Action.PLAY_NEXT_MEIPAI_VIDEO) {				currentPlayPosition += 1;				if (currentPlayPosition >= meiPaiContentDatas.size() + 1) {					currentPlayPosition = 0;				}				if (currentPlayPosition < meiPaiContentDatas.size() + 1) {					MeiPaiContentData meiPaiContentData = meiPaiContentDatas.get(currentPlayPosition - 1);					meiPaiContentData.action = Constant.Action.PLAY_MEIPAI_VIDEO;					meiPaiContentData.position = currentPlayPosition;					DataObservable.getInstance().setData(meiPaiContentData);				}			}		}	}	private void onLoad() {//		mLvFunny.stopRefresh();//		mLvFunny.stopLoadMore();//		mLvFunny.setRefreshTime(DateUtil.getTodayTime());		swipeRefreshLayout.setRefreshing(true);	}	private void requestMeiPaiDatas () {		if (mHttpRequestHelper != null) {//			String requestUrl = String.format(Constant.MEIPAI_VIDEO_URL,id,type,Constant.PAGE_SIZE,currentPage);//			if (id == 1 || type == 1) {//				requestUrl = String.format(Constant.MEIPAI_HOT_VIDEO_URL,Constant.PAGE_SIZE,currentPage);//			}			Bundle bundle = new Bundle();			bundle.putInt(Constant.MEIPAI_ID_KEY,id);			bundle.putInt(Constant.MEIPAI_TYPE_KEY,type);			bundle.putInt(Constant.CURRENT_PAGE_KEY,currentPage);			mHttpRequestHelper.sendRequestWithParms(Constant.Msg.MEIPAI_REQUEST, bundle);		}	}	@Override	public void onDestroy() {		if (mHttpRequestHelper != null) {			mHttpRequestHelper.onDestroy();		}		super.onDestroy();	}	@Override	public void onRefresh() {		meiPaiContentDatas.clear();		currentPage --;		if (currentPage < 1){			currentPage = 1;		}		requestMeiPaiDatas();		onLoad();	}}