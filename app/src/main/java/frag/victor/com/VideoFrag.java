package frag.victor.com;import android.content.Context;import android.content.Intent;import android.os.Bundle;import android.os.Handler;import android.os.Message;import android.support.annotation.Nullable;import android.support.v4.app.Fragment;import android.util.DisplayMetrics;import android.util.Log;import android.view.Display;import android.view.LayoutInflater;import android.view.SurfaceView;import android.view.View;import android.view.ViewGroup;import android.widget.AdapterView;import android.widget.FrameLayout;import android.widget.LinearLayout;import android.widget.Toast;import java.text.SimpleDateFormat;import java.util.ArrayList;import java.util.Date;import java.util.List;import java.util.Observable;import java.util.Observer;import adapter.victor.com.VideoAdapter;import data.victor.com.VideoContentData;import data.victor.com.VideoData;import flowfunny.victor.com.R;import mode.victor.com.DataObservable;import util.victor.com.Constant;import util.victor.com.DateUtil;import util.victor.com.HttpRequestHelper;import view.victor.com.CircularProgress;import view.victor.com.XListView;public class VideoFrag extends Fragment implements Observer,XListView.IXListViewListener,AdapterView.OnItemClickListener,AdapterView.OnItemLongClickListener {	private String TAG = "VideoFrag";	private CircularProgress mCpProgress;	private XListView mLvVideo;	private VideoAdapter mVideoAdapter;	private List<VideoContentData> videoContentDatas = new ArrayList<VideoContentData>();	private HttpRequestHelper mHttpRequestHelper;	private  int currentPage = 1;//当前页数	private int countPages;//总页数	private Context mContext;	private int currentPlayPosition;	Handler mHandler = new Handler(){		@Override		public void handleMessage(Message msg) {			switch (msg.what){				case Constant.Msg.REQUEST_SUCCESS:					mLvVideo.setPullLoadEnable(true);					mCpProgress.setVisibility(View.GONE);					videoContentDatas.addAll((List<VideoContentData>) msg.obj);					mVideoAdapter.setVideoContentDatas(videoContentDatas);					mVideoAdapter.notifyDataSetChanged();					mLvVideo.setRefreshTime(DateUtil.getTodayTime());					if(currentPage == countPages){						mLvVideo.setPullLoadEnable(false);					} else {						mLvVideo.setPullLoadEnable(true);					}					break;				case Constant.Msg.REQUEST_SUCCESS_NO_DATA:					mCpProgress.setVisibility(View.GONE);					if (currentPage == 1) {						videoContentDatas.clear();						mLvVideo.setPullLoadEnable(false);						mVideoAdapter.notifyDataSetChanged();					}					if (mContext != null) {						Toast.makeText(mContext, "服务器没有数据！", Toast.LENGTH_SHORT).show();					}					break;				case Constant.Msg.REQUEST_FAILED:					mCpProgress.setVisibility(View.GONE);					if (currentPage == 1) {						videoContentDatas.clear();						mLvVideo.setPullLoadEnable(false);						mVideoAdapter.notifyDataSetChanged();					}					if (mContext != null) {						Toast.makeText(mContext,"访问服务器失败！",Toast.LENGTH_SHORT).show();					}					break;				case Constant.Msg.PARSING_EXCEPTION:					mCpProgress.setVisibility(View.GONE);					if (currentPage == 1) {						videoContentDatas.clear();						mLvVideo.setPullLoadEnable(false);						mVideoAdapter.notifyDataSetChanged();					}					if (mContext != null) {						Toast.makeText(mContext,"数据解析异常！",Toast.LENGTH_SHORT).show();					}					break;				case Constant.Msg.NETWORK_ERROR:					mCpProgress.setVisibility(View.GONE);					if (currentPage == 1) {						videoContentDatas.clear();						mLvVideo.setPullLoadEnable(false);						mVideoAdapter.notifyDataSetChanged();					}					if (mContext != null) {						Toast.makeText(mContext,"网络错误，请检查网络是否连接！",Toast.LENGTH_SHORT).show();					}					break;				case Constant.Msg.SOCKET_TIME_OUT:					mCpProgress.setVisibility(View.GONE);					if (currentPage == 1) {						videoContentDatas.clear();						mLvVideo.setPullLoadEnable(false);						mVideoAdapter.notifyDataSetChanged();					}					if (mContext != null) {						Toast.makeText(mContext,"访问服务器超时，请重试！",Toast.LENGTH_SHORT).show();					}					break;			}		}	};	@Override	public void onActivityCreated(@Nullable Bundle savedInstanceState) {		super.onActivityCreated(savedInstanceState);		mContext = getContext();	}	@Override	public View onCreateView(LayoutInflater inflater, ViewGroup container,Bundle savedInstanceState) {		View view = inflater.inflate(R.layout.frag_video,container, false);		initialize(view);		DataObservable.getInstance().addObserver(this);		return view;	}	private void initialize (View view) {		mCpProgress = (CircularProgress) view.findViewById(R.id.cp_progress);		mLvVideo = (XListView) view.findViewById(R.id.lv_video_frag);		mLvVideo.setPullLoadEnable(false);		mLvVideo.setXListViewListener(this);		mLvVideo.setOnItemClickListener(this);		mLvVideo.setOnItemLongClickListener(this);		mVideoAdapter = new VideoAdapter(getContext(),mLvVideo);		mVideoAdapter.setVideoContentDatas(videoContentDatas);		mLvVideo.setAdapter(mVideoAdapter);		mHttpRequestHelper = new HttpRequestHelper(getContext());		requestVideoDatas();	}	@Override	public void update(Observable observable, Object data) {		Log.e(TAG, "update()......");		Message msg = new Message();		if (data instanceof VideoData) {			VideoData videoData = (VideoData) data;			int status = videoData.getStatus();			switch (status) {				case Constant.Msg.REQUEST_SUCCESS:					msg.what = Constant.Msg.REQUEST_SUCCESS;					msg.obj = videoData.getVideoContentDatas();					countPages = videoData.getAllPages();					break;				case Constant.Msg.REQUEST_SUCCESS_NO_DATA:					msg.what = Constant.Msg.REQUEST_SUCCESS_NO_DATA;					break;				case Constant.Msg.REQUEST_FAILED:					msg.what = Constant.Msg.REQUEST_FAILED;					break;				case Constant.Msg.PARSING_EXCEPTION:					msg.what = Constant.Msg.PARSING_EXCEPTION;					break;				case Constant.Msg.NETWORK_ERROR:					msg.what = Constant.Msg.NETWORK_ERROR;					break;				case Constant.Msg.SOCKET_TIME_OUT:					msg.what = Constant.Msg.SOCKET_TIME_OUT;					break;			}		} else if (data instanceof Integer) {			int action = (int) data;			if (action == Constant.Action.PLAY_NEXT_VIDEO) {				currentPlayPosition += 1;				if (currentPlayPosition >= videoContentDatas.size() + 1) {					currentPlayPosition = 1;				}				if (currentPlayPosition < videoContentDatas.size() + 1) {					VideoContentData videoContentData = videoContentDatas.get(currentPlayPosition - 1);					videoContentData.setAction(Constant.Action.PLAY_VIDEO_ACTION);					DataObservable.getInstance().setData(videoContentData);				}			}		}		mHandler.sendMessage(msg);	}	private void onLoad() {		mLvVideo.stopRefresh();		mLvVideo.stopLoadMore();		mLvVideo.setRefreshTime(DateUtil.getTodayTime());	}	@Override	public void onRefresh() {		videoContentDatas.clear();		currentPage --;		if (currentPage < 1){			currentPage = 1;		}		requestVideoDatas();		onLoad();	}	@Override	public void onLoadMore() {		videoContentDatas.clear();		currentPage ++;		requestVideoDatas();		onLoad();	}	private void requestVideoDatas () {		if (mHttpRequestHelper != null) {			mCpProgress.setVisibility(View.VISIBLE);			SimpleDateFormat sdf = new SimpleDateFormat(Constant.TIME_FORMAT);			String time = sdf.format(new Date());			String requestUrl = String.format(Constant.BUDEJIE_URL,currentPage,Constant.Action.VEDEO_ACTION,Constant.APP_ID,Constant.APP_SECRET,time);			mHttpRequestHelper.sendRequestWithParms(Constant.Msg.VIDEO_REQUEST, requestUrl);		}	}	@Override	public void onDestroy() {		if (mHttpRequestHelper != null) {			mHttpRequestHelper.onDestroy();		}		super.onDestroy();	}	@Override	public void onItemClick(AdapterView<?> parent, View view, int position, long id) {		if (videoContentDatas != null && videoContentDatas.size() > 0) {			if (position < videoContentDatas.size() + 1) {				currentPlayPosition = position;				VideoContentData videoContentData = videoContentDatas.get(position - 1);				videoContentData.setAction(Constant.Action.PLAY_VIDEO_ACTION);				DataObservable.getInstance().setData(videoContentData);			}		}	}	@Override	public boolean onItemLongClick(AdapterView<?> parent, View view, int position, long id) {		if (videoContentDatas != null && videoContentDatas.size() > 0) {			if (position < videoContentDatas.size() + 1) {				String funnyContent = videoContentDatas.get(position - 1).getText();				String funnyUrl = videoContentDatas.get(position - 1).getVideoUrl();				Intent intentshare = new Intent(Intent.ACTION_SEND);				intentshare.setType("text/plain")						.putExtra(Intent.EXTRA_SUBJECT, "分享")						.putExtra(Intent.EXTRA_TEXT,funnyContent + funnyUrl);				Intent.createChooser(intentshare, "分享");				startActivity(intentshare);			}		}		return false;	}}