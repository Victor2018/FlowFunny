package util.victor.com;import android.content.Context;import android.os.Bundle;import android.text.TextUtils;import android.util.Log;import org.json.JSONArray;import org.json.JSONException;import org.json.JSONObject;import org.jsoup.Jsoup;import org.jsoup.nodes.Document;import org.jsoup.select.Elements;import java.io.IOException;import java.io.Serializable;import java.net.SocketTimeoutException;import java.util.ArrayList;import java.util.HashMap;import java.util.List;import data.victor.com.EpgData;import data.victor.com.EpgInfo;import data.victor.com.FunnyContentData;import data.victor.com.FunnyData;import data.victor.com.GifContentData;import data.victor.com.GifData;import data.victor.com.MeiPaiCategoryContentData;import data.victor.com.MeiPaiCategoryData;import data.victor.com.MeiPaiContentData;import data.victor.com.MeiPaiData;import data.victor.com.PictureContentData;import data.victor.com.PictureData;import data.victor.com.VideoContentData;import data.victor.com.VideoData;import data.victor.com.VoiceContentData;import data.victor.com.VoiceData;import mode.victor.com.DataObservable;/** * Created by victor on 2016/1/21. */public class HttpActions {    private static String TAG = "HttpActions";    public static void requestFunnyAction (String url,Context context){        Log.e(TAG,"requestFunnyAction()......url = " + url);        int status = 0;        FunnyData funnyData = new FunnyData();        if (HttpUtil.isNetEnable(context)){            try {                String result = HttpUtil.HttpGetRequest(url);                JSONObject data = new JSONObject(result);                if (data != null){                    String resCode = data.optString("showapi_res_code");                    String resError = data.optString("showapi_res_error");                    funnyData.setResCode(resCode);                    funnyData.setResError(resError);                    JSONObject resBody = data.optJSONObject("showapi_res_body");                    JSONObject pageBean = resBody.optJSONObject("pagebean");                    int allNum = pageBean.optInt("allNum");                    int allPages = pageBean.optInt("allPages");                    funnyData.setAllNum(allNum);                    funnyData.setAllPages(allPages);                    JSONArray contentList = pageBean.optJSONArray("contentlist");                    List<FunnyContentData> connentDatas = new ArrayList<>();                    if (contentList.length() > 0){                        status = Constant.Msg.REQUEST_SUCCESS;                        for(int i=0;i<contentList.length();i++){                            JSONObject content = contentList.optJSONObject(i);                            FunnyContentData fcd = new FunnyContentData();                            String createTime = content.optString("create_time").trim();                            String hate = content.optString("hate").trim();                            int height = content.optInt("height");                            int id = content.optInt("id");                            int love = content.optInt("love");                            String name = content.optString("name").trim();                            String profileImage = content.optString("profile_image").trim();                            String text = content.optString("text").trim();                            int type = content.optInt("type");                            int videoTime = content.optInt("videotime");                            int voiceLength = content.optInt("voicelength");                            int voiceTime = content.optInt("voicetime");                            String voiceUri = content.optString("voiceuri").trim();                            String weixinUrl = content.optString("weixin_url").trim();                            int width = content.optInt("width");                            fcd.setCreateTime(createTime);                            fcd.setHate(hate);                            fcd.setHeight(height);                            fcd.setId(id);                            fcd.setLove(love);                            fcd.setName(name);                            fcd.setProfileImage(profileImage);                            fcd.setText(text);                            fcd.setType(type);                            fcd.setVideoTime(videoTime);                            fcd.setVoiceLength(voiceLength);                            fcd.setVoiceTime(voiceTime);                            fcd.setVoiceUri(voiceUri);                            fcd.setWeixinUrl(weixinUrl);                            fcd.setWidth(width);                            connentDatas.add(fcd);                        }                        funnyData.setFunnyConnentDatas(connentDatas);                    } else {                        status = Constant.Msg.REQUEST_SUCCESS_NO_DATA;                    }                } else {                    status = Constant.Msg.REQUEST_FAILED;                }            } catch (JSONException e) {                e.printStackTrace();                status = Constant.Msg.PARSING_EXCEPTION;            } catch (SocketTimeoutException e) {                e.printStackTrace();                status = Constant.Msg.SOCKET_TIME_OUT;            }        }else {            status = Constant.Msg.NETWORK_ERROR;        }        funnyData.setStatus(status);        DataObservable.getInstance().setData(funnyData);    }    public static void requestGifAction (String url,Context context){        Log.e(TAG,"requestGifAction()......url = " + url);        int status = 0;        GifData gifData = new GifData();        if (HttpUtil.isNetEnable(context)){            try {                String result = HttpUtil.HttpGetRequest(url);                JSONObject data = new JSONObject(result);                if (data != null){                    String resCode = data.optString("showapi_res_code");                    String resError = data.optString("showapi_res_error");                    gifData.setResCode(resCode);                    gifData.setResError(resError);                    JSONObject resBody = data.optJSONObject("showapi_res_body");                    JSONObject pageBean = resBody.optJSONObject("pagebean");                    int allNum = pageBean.optInt("allNum");                    int allPages = pageBean.optInt("allPages");                    gifData.setAllNum(allNum);                    gifData.setAllPages(allPages);                    JSONArray contentList = pageBean.optJSONArray("contentlist");                    List<GifContentData> connentDatas = new ArrayList<>();                    if (contentList.length() > 0){                        status = Constant.Msg.REQUEST_SUCCESS;                        for(int i=0;i<contentList.length();i++){                            JSONObject content = contentList.getJSONObject(i);                            GifContentData gcd = new GifContentData();                            String createTime = content.optString("create_time").trim();                            String hate = content.optString("hate").trim();                            int height = content.optInt("height");                            int id = content.optInt("id");                            String image0 = content.optString("image0").trim();                            String image1 = content.optString("image1").trim();                            String image2 = content.optString("image2").trim();                            String image3 = content.optString("image3").trim();                            int love = content.optInt("love");                            String name = content.optString("name").trim();                            String profileImage = content.optString("profile_image").trim();                            String text = content.optString("text").trim();                            int type = content.optInt("type");                            int videoTime = content.optInt("videotime");//                            int voiceLength = content.getInt("voicelength");                            int voiceTime = content.optInt("voicetime");                            String voiceUri = content.optString("voiceuri").trim();                            String weixinUrl = content.optString("weixin_url").trim();                            int width = content.optInt("width");                            gcd.setCreateTime(createTime);                            gcd.setHate(hate);                            gcd.setHeight(height);                            gcd.setId(id);                            gcd.setImage0(image0);                            gcd.setImage1(image1);                            gcd.setImage2(image2);                            gcd.setImage3(image3);                            gcd.setLove(love);                            gcd.setName(name);                            gcd.setProfileImage(profileImage);                            gcd.setText(text);                            gcd.setType(type);                            gcd.setVideoTime(videoTime);//                            gcd.setVoiceLength(voiceLength);                            gcd.setVoiceTime(voiceTime);                            gcd.setVoiceUri(voiceUri);                            gcd.setWeixinUrl(weixinUrl);                            gcd.setWidth(width);                            connentDatas.add(gcd);                        }                        gifData.setGifConnentDatas(connentDatas);                    } else {                        status = Constant.Msg.REQUEST_SUCCESS_NO_DATA;                    }                } else {                    status = Constant.Msg.REQUEST_FAILED;                }            } catch (JSONException e) {                e.printStackTrace();                status = Constant.Msg.PARSING_EXCEPTION;            } catch (SocketTimeoutException e) {                e.printStackTrace();                status = Constant.Msg.SOCKET_TIME_OUT;            }        } else {            status = Constant.Msg.NETWORK_ERROR;        }        gifData.setStatus(status);        DataObservable.getInstance().setData(gifData);    }    public static void requestVoiceAction (String url,Context context){        Log.e(TAG, "requestVoiceAction()......url = " + url);        int status = 0;        VoiceData voiceData = new VoiceData();        if (HttpUtil.isNetEnable(context)){            try {                String result = HttpUtil.HttpGetRequest(url);                JSONObject data = new JSONObject(result);                if (data != null){                    String resCode = data.optString("showapi_res_code");                    String resError = data.optString("showapi_res_error");                    voiceData.setResCode(resCode);                    voiceData.setResError(resError);                    JSONObject resBody = data.optJSONObject("showapi_res_body");                    JSONObject pageBean = resBody.optJSONObject("pagebean");                    int allNum = pageBean.optInt("allNum");                    int allPages = pageBean.optInt("allPages");                    voiceData.setAllNum(allNum);                    voiceData.setAllPages(allPages);                    JSONArray contentList = pageBean.optJSONArray("contentlist");                    List<VoiceContentData> contentDatas = new ArrayList<>();                    if (contentList.length() > 0){                        status = Constant.Msg.REQUEST_SUCCESS;                        for(int i=0;i<contentList.length();i++){                            JSONObject content = contentList.getJSONObject(i);                            VoiceContentData vcd = new VoiceContentData();                            String createTime = content.optString("create_time").trim();                            String hate = content.optString("hate").trim();                            int height = content.optInt("height");                            int id = content.optInt("id");                            String image3 = content.optString("image3").trim();                            int love = content.optInt("love");                            String name = content.optString("name").trim();                            String profileImage = content.optString("profile_image").trim();                            String text = content.optString("text").trim();                            int type = content.optInt("type");                            int videoTime = content.optInt("videotime");                            String voiceUrl = content.optString("voice_uri").trim();                            int voiceLength = content.optInt("voicelength");                            int voiceTime = content.optInt("voicetime");                            String weixinUrl = content.optString("weixin_url").trim();                            int width = content.optInt("width");                            vcd.setCreateTime(createTime);                            vcd.setHate(hate);                            vcd.setHeight(height);                            vcd.setId(id);                            vcd.setImage3(image3);                            vcd.setLove(love);                            vcd.setName(name);                            vcd.setProfileImage(profileImage);                            vcd.setText(text);                            vcd.setType(type);                            vcd.setVideoTime(videoTime);                            vcd.setVoiceUri(voiceUrl);                            vcd.setVoiceLength(voiceLength);                            vcd.setVoiceTime(voiceTime);                            vcd.setVoiceUri(voiceUrl);                            vcd.setWeixinUrl(weixinUrl);                            vcd.setWidth(width);                            contentDatas.add(vcd);                        }                        voiceData.setVoiceContentDatas(contentDatas);                    } else {                        status = Constant.Msg.REQUEST_SUCCESS_NO_DATA;                    }                } else {                    status = Constant.Msg.REQUEST_FAILED;                }            } catch (JSONException e) {                e.printStackTrace();                status = Constant.Msg.PARSING_EXCEPTION;            } catch (SocketTimeoutException e) {                e.printStackTrace();                status = Constant.Msg.SOCKET_TIME_OUT;            }        }else {            status = Constant.Msg.NETWORK_ERROR;        }        voiceData.setStatus(status);        DataObservable.getInstance().setData(voiceData);    }    public static void requestVideoAction (String url,Context context){        Log.e(TAG,"requestVideoAction()......url = " + url);        int status = 0;        VideoData videoData = new VideoData();        if (HttpUtil.isNetEnable(context)){            try {                String result = HttpUtil.HttpGetRequest(url);                JSONObject data = new JSONObject(result);                if (data != null){                    String resCode = data.optString("showapi_res_code");                    String resError = data.optString("showapi_res_error");                    videoData.setResCode(resCode);                    videoData.setResError(resError);                    JSONObject resBody = data.optJSONObject("showapi_res_body");                    JSONObject pageBean = resBody.optJSONObject("pagebean");                    int allNum = pageBean.optInt("allNum");                    int allPages = pageBean.optInt("allPages");                    videoData.setAllNum(allNum);                    videoData.setAllPages(allPages);                    JSONArray contentList = pageBean.optJSONArray("contentlist");                    List<VideoContentData> connentDatas = new ArrayList<>();                    if (contentList.length() > 0){                        status = Constant.Msg.REQUEST_SUCCESS;                        for(int i=0;i<contentList.length();i++){                            JSONObject content = contentList.getJSONObject(i);                            VideoContentData vcd = new VideoContentData();                            String createTime = content.optString("create_time").trim();                            String hate = content.optString("hate").trim();                            int height = content.optInt("height");                            int id = content.optInt("id");//                            String image3 = content.getString("image3").trim();                            int love = content.optInt("love");                            String name = content.optString("name").trim();                            String profileImage = content.optString("profile_image").trim();                            String text = content.optString("text").trim();                            int type = content.optInt("type");                            String videoUrl = content.optString("video_uri").trim();                            int videoTime = content.optInt("videotime");                            int voiceLength = content.optInt("voicelength");                            int voiceTime = content.optInt("voicetime");                            String voiceUri = content.optString("voiceuri").trim();                            String weixinUrl = content.optString("weixin_url").trim();                            int width = content.optInt("width");                            vcd.setCreateTime(createTime);                            vcd.setHate(hate);                            vcd.setHeight(height);//                            vcd.setImage3(image3);                            vcd.setId(id);                            vcd.setLove(love);                            vcd.setName(name);                            vcd.setProfileImage(profileImage);                            vcd.setText(text);                            vcd.setType(type);                            vcd.setVideoUrl(videoUrl);                            vcd.setVideoTime(videoTime);                            vcd.setVoiceLength(voiceLength);                            vcd.setVoiceTime(voiceTime);                            vcd.setVoiceUri(voiceUri);                            vcd.setWeixinUrl(weixinUrl);                            vcd.setWidth(width);                            connentDatas.add(vcd);                        }                        videoData.setVideoContentDatas(connentDatas);                    } else {                        status = Constant.Msg.REQUEST_SUCCESS_NO_DATA;                    }                } else {                    status = Constant.Msg.REQUEST_FAILED;                }            } catch (JSONException e) {                e.printStackTrace();                status = Constant.Msg.PARSING_EXCEPTION;            } catch (SocketTimeoutException e) {                e.printStackTrace();                status = Constant.Msg.SOCKET_TIME_OUT;            }        }else {            status = Constant.Msg.NETWORK_ERROR;        }        videoData.setStatus(status);        DataObservable.getInstance().setData(videoData);    }    public static void requestBaseAction (String url,Context context){        Log.e(TAG,"requestBaseAction()......url = " + url);        int status = 0;        Bundle responseData = new Bundle();        if (HttpUtil.isNetEnable(context)){            String result = null;            try {                result = HttpUtil.HttpGetRequest(url);                Log.e(TAG,"result = " + result);                if (!TextUtils.isEmpty(result)) {                    status = Constant.Msg.REQUEST_SUCCESS;                    responseData.putString(Constant.BASE_DATA_KEY,result);                } else {                    status = Constant.Msg.REQUEST_FAILED;                }            } catch (SocketTimeoutException e) {                e.printStackTrace();                status = Constant.Msg.SOCKET_TIME_OUT;            }        } else {            status = Constant.Msg.NETWORK_ERROR;        }        responseData.putInt(Constant.STATUS_KEY, status);        responseData.putInt(Constant.REQUEST_MSG_KEY, Constant.Msg.BASE_REQUEST);        DataObservable.getInstance().setData(responseData);    }    public static void requestPictureAction (String url,Context context){        Log.e(TAG,"requestPictureAction()......url = " + url);        int status = 0;        PictureData pictureData = new PictureData();        if (HttpUtil.isNetEnable(context)){            try {                String result = HttpUtil.HttpGetRequest(url);                JSONObject data = new JSONObject(result);                Log.e(TAG,"requestPictureAction()......result = " + result);                if (data != null){                    boolean isError = data.optBoolean("error");                    if (!isError) {                        JSONArray datas = data.optJSONArray("results");                        if (datas.length() > 0) {                            status = Constant.Msg.REQUEST_SUCCESS;                            List<PictureContentData> pictureContentDatas = new ArrayList<>();                            for (int i=0;i<datas.length();i++) {                                JSONObject item = datas.getJSONObject(i);                                PictureContentData info = new PictureContentData();                                info._id = item.optString("_id").trim();                                info.createdAt = item.optString("createdAt").trim();                                info.desc = item.optString("desc").trim();                                info.publishedAt = item.optString("publishedAt").trim();                                info.source = item.optString("source").trim();                                info.type = item.optString("type").trim();                                info.url = item.optString("url").trim();                                info.used = item.optBoolean("used");                                info.who = item.optString("who").trim();                                pictureContentDatas.add(info);                            }                            pictureData.setPictureContentDatas(pictureContentDatas);                        } else {                            status = Constant.Msg.REQUEST_SUCCESS_NO_DATA;                        }                    }                } else {                    status = Constant.Msg.REQUEST_FAILED;                }            } catch (JSONException e) {                e.printStackTrace();                status = Constant.Msg.PARSING_EXCEPTION;            } catch (SocketTimeoutException e) {                e.printStackTrace();                status = Constant.Msg.SOCKET_TIME_OUT;            }        }else {            status = Constant.Msg.NETWORK_ERROR;        }        pictureData.setStatus(status);        DataObservable.getInstance().setData(pictureData);    }    public static void requestMeiPaiAction (Context context,Bundle bundle){        int id = bundle.getInt(Constant.MEIPAI_ID_KEY);        int type = bundle.getInt(Constant.MEIPAI_TYPE_KEY);        int currentPage = bundle.getInt(Constant.CURRENT_PAGE_KEY);        String url = String.format(Constant.MEIPAI_VIDEO_URL,id,type,Constant.PAGE_SIZE,currentPage);        if (id == 1 || type == 1) {            url = String.format(Constant.MEIPAI_HOT_VIDEO_URL,Constant.PAGE_SIZE,currentPage);        }        Log.e(TAG,"requestMeiPaiAction()......url = " + url);        int status = 0;        MeiPaiData meiPaiData = new MeiPaiData();        meiPaiData.id = id;        if (HttpUtil.isNetEnable(context)){            try {                String result = HttpUtil.HttpGetRequest(url);                Log.e(TAG,"result = " + result);                JSONArray datas = new JSONArray(result);                if (datas != null){                    if (datas.length() > 0) {                        status = Constant.Msg.REQUEST_SUCCESS;                        List<MeiPaiContentData> meiPaiContentDatas = new ArrayList<>();                        for (int i=0;i<datas.length();i++) {                            JSONObject item = datas.getJSONObject(i);                            MeiPaiContentData info = new MeiPaiContentData();                            info.recommend_caption = item.optString("recommend_caption").trim();                            info.recommend_cover_pic = item.optString("recommend_cover_pic").trim();                            JSONObject data = item.optJSONObject("media");                            if (data != null) {                                info.id = data.optInt("id");                                info.caption = data.optString("caption").trim();                                info.video = data.optString("video").trim();                                info.created_at = item.optString("created_at").trim();                                info.comments_count = data.optInt("comments_count");                                info.likes_count = data.optInt("likes_count");                                info.reposts_count = data.optInt("reposts_count");                                JSONObject usrData = data.optJSONObject("user");                                if (usrData != null) {                                    info.avatar = usrData.optString("avatar").trim();                                }                            }                            meiPaiContentDatas.add(info);                        }                        meiPaiData.meiPaiContentDatas = meiPaiContentDatas;                    } else {                        status = Constant.Msg.REQUEST_SUCCESS_NO_DATA;                    }                } else {                    status = Constant.Msg.REQUEST_FAILED;                }            } catch (JSONException e) {                e.printStackTrace();                status = Constant.Msg.PARSING_EXCEPTION;            } catch (SocketTimeoutException e) {                e.printStackTrace();                status = Constant.Msg.SOCKET_TIME_OUT;            }        }else {            status = Constant.Msg.NETWORK_ERROR;        }        meiPaiData.status = status;        DataObservable.getInstance().setData(meiPaiData);    }    public static void requestMeiPaiCategoryAction (Context context){        Log.e(TAG,"requestMeiPaiCategoryAction()......");        int status = 0;        MeiPaiCategoryData meiPaiCategoryData = new MeiPaiCategoryData();        if (HttpUtil.isNetEnable(context)){            try {                String result = HttpUtil.HttpGetRequest(Constant.MEIPAI_CATEGORY_URL);                Log.e(TAG,"result = " + result);                JSONArray datas = new JSONArray(result);                if (datas != null){                    if (datas.length() > 0) {                        status = Constant.Msg.REQUEST_SUCCESS;                        List<MeiPaiCategoryContentData> meiPaiCategoryContentDatas = new ArrayList<>();                        for (int i=0;i<datas.length();i++) {                            JSONObject item = datas.getJSONObject(i);                            MeiPaiCategoryContentData info = new MeiPaiCategoryContentData();                            info.id = item.optInt("id");                            info.type = item.optInt("type");                            info.name = item.optString("name").trim();                            meiPaiCategoryContentDatas.add(info);                        }                        meiPaiCategoryData.meiPaiCategoryContentDatas = meiPaiCategoryContentDatas;                    } else {                        status = Constant.Msg.REQUEST_SUCCESS_NO_DATA;                    }                } else {                    status = Constant.Msg.REQUEST_FAILED;                }            } catch (JSONException e) {                e.printStackTrace();                status = Constant.Msg.PARSING_EXCEPTION;            } catch (SocketTimeoutException e) {                e.printStackTrace();                status = Constant.Msg.SOCKET_TIME_OUT;            }        }else {            status = Constant.Msg.NETWORK_ERROR;        }        meiPaiCategoryData.status = status;        DataObservable.getInstance().setData(meiPaiCategoryData);    }    public static void requestLiveEpgAction (Context context,String url){        Log.e(TAG,"requestLiveEpgAction()......url = " + url);        int status = 0;        EpgData epgData = new EpgData();        if (HttpUtil.isNetEnable(context)){            try {                Document document = Jsoup.connect(url)                        .userAgent("Mozilla/5.0 (Windows NT 6.1; WOW64; rv:5.0) Gecko/20100101 Firefox/5.0")                        .timeout(10000).get();                HashMap<String,String> epgMap = new HashMap<>();                Elements liElements = document.getElementsByClass("li");                if (liElements.size() > 0) {                    List<EpgInfo> epgInfos = new ArrayList<>();                    for (int i = 0; i < liElements.size(); i++) {                        String[] epgs = liElements.get(i).text().split(" ");                        epgMap.put(epgs[0],epgs[1]);                        EpgInfo info = new EpgInfo();                        info.epg = epgs[1];                        if (i < liElements.size() - 1) {                            info.startTime = liElements.get(i).text().split(" ")[0];                            info.endTime = liElements.get(i + 1).text().split(" ")[0];                        } else {                            if (i == liElements.size() - 1) {                                info.startTime = liElements.get(i).text().split(" ")[0];                                info.endTime = "00:00";                            }                        }                        epgInfos.add(info);                    }                    status = Constant.Msg.REQUEST_SUCCESS;                    epgData.epgInfos = epgInfos;                } else {                    status = Constant.Msg.REQUEST_SUCCESS_NO_DATA;                }            } catch (SocketTimeoutException e) {                e.printStackTrace();                status = Constant.Msg.SOCKET_TIME_OUT;            } catch (IOException e) {                e.printStackTrace();            }        } else {            status = Constant.Msg.NETWORK_ERROR;        }        epgData.status = status;        DataObservable.getInstance().setData(epgData);    }}